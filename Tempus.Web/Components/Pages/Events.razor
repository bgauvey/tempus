@page "/events"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Tempus.Core.Interfaces
@using Tempus.Core.Models
@using Tempus.Core.Enums
@using Tempus.Web.Components.Dialogs
@using Tempus.Web.Components.Shared
@attribute [Authorize]
@inject IEventRepository EventRepository
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Events - Tempus</PageTitle>

<!-- Premium Header Section -->
<div class="events-header">
    <div class="events-header-content">
        <div class="events-header-icon">
            <RadzenIcon Icon="event" Style="color: white; font-size: 3rem;" />
        </div>
        <h1 class="events-header-title">ðŸ“… Events Management</h1>
        <p class="events-header-subtitle">Organize, track, and manage all your events in one place</p>
    </div>
</div>

<!-- Stats Section -->
<div class="events-stats-container">
    <RadzenRow Gap="1.5rem">
        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
            <div class="events-stat-card" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                <div class="events-stat-icon">
                    <RadzenIcon Icon="event_available" />
                </div>
                <div class="events-stat-content">
                    <div class="events-stat-value">@_events.Count</div>
                    <div class="events-stat-label">Total Events</div>
                </div>
            </div>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
            <div class="events-stat-card" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);">
                <div class="events-stat-icon">
                    <RadzenIcon Icon="priority_high" />
                </div>
                <div class="events-stat-content">
                    <div class="events-stat-value">@_events.Count(e => e.Priority == Priority.Urgent || e.Priority == Priority.High)</div>
                    <div class="events-stat-label">High Priority</div>
                </div>
            </div>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
            <div class="events-stat-card" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);">
                <div class="events-stat-icon">
                    <RadzenIcon Icon="today" />
                </div>
                <div class="events-stat-content">
                    <div class="events-stat-value">@_events.Count(e => e.StartTime.Date == DateTime.Today)</div>
                    <div class="events-stat-label">Today</div>
                </div>
            </div>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
            <div class="events-stat-card" style="background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);">
                <div class="events-stat-icon">
                    <RadzenIcon Icon="schedule" />
                </div>
                <div class="events-stat-content">
                    <div class="events-stat-value">@_events.Count(e => e.StartTime > DateTime.Now)</div>
                    <div class="events-stat-label">Upcoming</div>
                </div>
            </div>
        </RadzenColumn>
    </RadzenRow>
</div>

<EventsGrid Events="@_events"
            IsLoading="@_loading"
            OnSearch="@SearchEvents"
            OnEditEvent="@EditEvent"
            OnDeleteEvent="@DeleteEvent"
            OnCreateEvent="@CreateEvent" />

<style>
    /* Header Styling */
    .events-header {
        background: var(--primary-gradient);
        color: white;
        padding: 3rem 2rem;
        border-radius: 16px;
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        margin-bottom: 2rem;
        animation: fadeInUp 0.6s ease-out;
    }

    .events-header-content {
        max-width: 1200px;
        margin: 0 auto;
        text-align: center;
    }

    .events-header-icon {
        margin-bottom: 1rem;
        animation: float 3s ease-in-out infinite;
    }

    .events-header-title {
        font-size: 2.5rem;
        font-weight: 800;
        margin: 0 0 1rem 0;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

    .events-header-subtitle {
        font-size: 1.2rem;
        opacity: 0.95;
        margin: 0;
    }

    /* Stats Cards */
    .events-stats-container {
        margin-bottom: 2rem;
        animation: fadeInUp 0.6s ease-out 0.1s backwards;
    }

    .events-stat-card {
        padding: 1.5rem;
        border-radius: 16px;
        color: white;
        display: flex;
        align-items: center;
        gap: 1.5rem;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        transition: all 0.3s ease;
        animation: fadeInUp 0.6s ease-out backwards;
    }

    .events-stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
    }

    .events-stat-icon {
        width: 60px;
        height: 60px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2rem;
    }

    .events-stat-content {
        flex: 1;
    }

    .events-stat-value {
        font-size: 2.5rem;
        font-weight: 800;
        line-height: 1;
        margin-bottom: 0.25rem;
    }

    .events-stat-label {
        font-size: 0.875rem;
        opacity: 0.9;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }


    /* Animations */
    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes float {
        0%, 100% {
            transform: translateY(0);
        }
        50% {
            transform: translateY(-10px);
        }
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .events-header-title {
            font-size: 2rem;
        }

        .events-header-subtitle {
            font-size: 1rem;
        }

        .events-stat-value {
            font-size: 2rem;
        }

        .events-actions-card {
            padding: 1.5rem;
        }

        .events-grid-container {
            padding: 1rem;
        }
    }
</style>

@code {
    private List<Event> _events = new();
    private bool _loading = true;
    private string _userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                _userId = appUser.Id;
            }
        }
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        _loading = true;
        StateHasChanged();
        _events = await EventRepository.GetAllAsync(_userId);
        _loading = false;
        StateHasChanged();
    }

    private async Task SearchEvents(string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadEvents();
        }
        else
        {
            _loading = true;
            _events = await EventRepository.SearchAsync(searchTerm, _userId);
            _loading = false;
        }
    }

    private async Task CreateEvent()
    {
        await OpenEventDialogAsync(null);
    }

    private async Task EditEvent(Guid id)
    {
        await OpenEventDialogAsync(id);
    }

    private async Task OpenEventDialogAsync(Guid? eventId)
    {
        var parameters = new Dictionary<string, object>();

        if (eventId.HasValue)
        {
            parameters.Add("EventId", eventId.Value);
        }

        var result = await DialogService.OpenAsync<EventFormDialog>(
            eventId.HasValue ? "Edit Event" : "Create Event",
            parameters,
            new DialogOptions
            {
                Width = "600px",
                Height = "auto",
                Resizable = true,
                Draggable = true
            });

        // If the dialog was saved (result == true), reload events
        if (result is bool saved && saved)
        {
            await LoadEvents();
        }
    }

    private async Task DeleteEvent(Guid id)
    {
        var result = await DialogService.Confirm(
            "Are you sure you want to delete this event?",
            "Delete Event",
            new ConfirmOptions() { OkButtonText = "Delete", CancelButtonText = "Cancel" });

        if (result == true)
        {
            await EventRepository.DeleteAsync(id, _userId);
            await LoadEvents();
        }
    }
}
