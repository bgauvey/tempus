@page "/calendar"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Tempus.Core.Interfaces
@using Tempus.Core.Models
@using Tempus.Core.Enums
@using Tempus.Web.Components.Dialogs
@using Tempus.Web.Components.Shared
@using Tempus.Web.Services
@using Tempus.Web.Helpers
@using Microsoft.JSInterop
@attribute [Authorize]
@inject IEventRepository EventRepository
@inject ISettingsService SettingsService
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IPdfAgendaService PdfAgendaService
@inject IJSRuntime JSRuntime
@inject IEmailNotificationService EmailNotificationService
@inject ContextMenuService ContextMenuService
@implements IDisposable

<PageTitle>Calendar - Tempus</PageTitle>

<style>
    /* Calendar Page Layout */
    .calendar-page-container {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 80px); /* Subtract header height */
        overflow: hidden;
    }

    .calendar-header-section {
        flex-shrink: 0;
    }

    .calendar-templates-section {
        flex-shrink: 0;
    }

    .calendar-main-section {
        flex: 1;
        display: flex;
        flex-direction: column;
        min-height: 0; /* Important for flex children */
        overflow: hidden;
    }

    .calendar-scheduler-card {
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .calendar-scheduler-card .rz-card-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    /* Make RadzenScheduler fill available space */
    .calendar-scheduler-card .rz-scheduler {
        height: 100% !important;
        min-height: 500px;
    }

    .calendar-scheduler-card .rz-scheduler .rz-scheduler-content {
        height: calc(100% - 60px) !important; /* Subtract scheduler header */
    }

    /* Calendar Styling */
    .events-sidebar {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        animation: fadeInUp 0.6s ease-out 0.3s backwards;
    }

    .events-sidebar-title {
        font-size: 1.3rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
    }

    .no-events-message {
        text-align: center;
        padding: 2rem;
        font-style: italic;
        opacity: 0.7;
    }

    .event-detail-card {
        border-radius: 12px;
        transition: var(--transition-smooth);
    }

    .event-detail-card:hover {
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        transform: translateY(-2px);
    }

    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 400px;
    }

    /* Time Block Templates */
    .template-buttons-container {
        border-radius: 16px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        animation: fadeInUp 0.6s ease-out 0.15s backwards;
    }

    .template-buttons-title {
        font-size: 1.1rem;
        font-weight: 700;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .template-btn {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        border: none !important;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.25) !important;
        border-radius: 10px !important;
        font-weight: 600 !important;
        transition: var(--transition-smooth) !important;
        padding: 10px 16px !important;
        font-size: 0.85rem !important;
    }

    .template-btn:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 16px rgba(102, 126, 234, 0.35) !important;
    }

    .template-btn.deep-work {
        background: linear-gradient(135deg, #8E24AA 0%, #6A1B9A 100%) !important;
    }

    .template-btn.meeting {
        background: linear-gradient(135deg, #1E88E5 0%, #1565C0 100%) !important;
    }

    .template-btn.break {
        background: linear-gradient(135deg, #43A047 0%, #2E7D32 100%) !important;
    }

    .template-btn.focus {
        background: linear-gradient(135deg, #FB8C00 0%, #EF6C00 100%) !important;
    }
</style>

<div class="calendar-page-container">

<div class="calendar-header-section">
    <RadzenCard Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 16px; padding: 2rem; box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3); margin-bottom: 2rem;">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Gap="1rem">
            <RadzenText TextStyle="TextStyle.DisplayH4" Style="font-weight: 800; margin: 0;">ðŸ“… Calendar</RadzenText>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                <RadzenButton Icon="picture_as_pdf" ButtonStyle="ButtonStyle.Success" Click="DownloadDailyAgenda" Size="ButtonSize.Medium" Text="Day Agenda" title="Download daily agenda as PDF" />
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
</div>

<div class="calendar-templates-section">
    <RadzenCard Style="margin-bottom: 2rem;">
        <RadzenStack Gap="1rem">
            <RadzenText TextStyle="TextStyle.H6" Style="font-weight: 700;">âš¡ Quick Time Block Templates</RadzenText>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.75rem" Wrap="FlexWrap.Wrap">
                <RadzenButton Click="@(() => CreateFromTemplate("Deep Work", 120))" class="template-btn deep-work" Size="ButtonSize.Small">
                    ðŸ§  Deep Work (2h)
                </RadzenButton>
                <RadzenButton Click="@(() => CreateFromTemplate("Meeting", 30))" class="template-btn meeting" Size="ButtonSize.Small">
                    ðŸ‘¥ Meeting (30m)
                </RadzenButton>
                <RadzenButton Click="@(() => CreateFromTemplate("Focus Block", 90))" class="template-btn focus" Size="ButtonSize.Small">
                    ðŸŽ¯ Focus Block (1.5h)
                </RadzenButton>
                <RadzenButton Click="@(() => CreateFromTemplate("Break", 15))" class="template-btn break" Size="ButtonSize.Small">
                    â˜• Break (15m)
                </RadzenButton>
                <RadzenButton Click="@(() => CreateFromTemplate("Planning", 60))" class="template-btn" Size="ButtonSize.Small">
                    ðŸ“‹ Planning (1h)
                </RadzenButton>
                <RadzenButton Click="@(() => CreateFromTemplate("Review", 45))" class="template-btn" Size="ButtonSize.Small">
                    âœ… Review (45m)
                </RadzenButton>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
</div>

<div class="calendar-main-section">
    <RadzenCard class="calendar-scheduler-card" @oncontextmenu:preventDefault>
        @if (_loading)
        {
            <div class="loading-container">
                <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
            </div>
        }
        else
        {
            <RadzenScheduler @ref="_scheduler" TItem="AppointmentData" Data="@_appointments"
                           StartProperty="Start" EndProperty="End" TextProperty="Text"
                           AppointmentSelect="@OnAppointmentSelect"
                           SlotSelect="@OnSlotSelect"
                           AppointmentRender="@OnAppointmentRender"
                           AppointmentMove="@OnAppointmentMove">
                <ChildContent>
                    <RadzenMonthView />
                    <RadzenWeekView />
                    <RadzenDayView />
                    <RadzenYearView />
                    <RadzenYearPlannerView />
                    <RadzenYearTimelineView />
                </ChildContent>
                <Template Context="appointment">
                    <div @oncontextmenu="@(args => ShowContextMenu(args, appointment))" @oncontextmenu:preventDefault="true">
                        @appointment.Text
                    </div>
                </Template>
            </RadzenScheduler>
        }
    </RadzenCard>
</div>


</div>

@code {
    // Appointment wrapper class for RadzenScheduler
    public class AppointmentData
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Text { get; set; } = string.Empty;
        public Event Event { get; set; } = null!;
    }

    // State variables
    private DateTime _selectedDate = DateTime.Today;
    private List<Event> _events = new();
    private List<AppointmentData> _appointments = new();
    private bool _loading = true;
    private CalendarSettings? _settings;
    private string _userId = string.Empty;
    private RadzenScheduler<AppointmentData>? _scheduler;

    // Helper classes
    private CalendarEventManager? _eventManager;
    private CalendarDragDropManager? _dragDropManager;
    private CalendarScrollManager? _scrollManager;
    private CalendarFormatter? _formatter;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                _userId = appUser.Id;
                _settings = await SettingsService.GetOrCreateDefaultSettingsAsync(_userId);
            }
        }

        // Initialize helper classes
        _eventManager = new CalendarEventManager(
            EventRepository, DialogService, EmailNotificationService,
            AuthenticationStateProvider, UserManager);
        _dragDropManager = new CalendarDragDropManager(DialogService, _eventManager);
        _scrollManager = new CalendarScrollManager(JSRuntime);
        _formatter = new CalendarFormatter(_settings);

        await LoadEvents();
    }


    private async Task LoadEvents()
    {
        _loading = true;
        StateHasChanged();

        // Load events for a wide range (3 months back, 3 months forward)
        var startDate = DateTime.Today.AddMonths(-3);
        var endDate = DateTime.Today.AddMonths(3);

        _events = await EventRepository.GetEventsByDateRangeAsync(startDate, endDate, _userId);

        // Convert events to appointments for RadzenScheduler
        _appointments = _events.Select(e => new AppointmentData
        {
            Start = e.StartTime,
            End = e.EndTime,
            Text = e.Title,
            Event = e
        }).ToList();

        _loading = false;
        StateHasChanged();
    }

    private async Task DownloadDailyAgenda()
    {
        try
        {
            // Get events for the selected date
            var eventsForDay = GetEventsForDay(_selectedDate);

            // Get user name
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userName = "User";
            if (user.Identity?.IsAuthenticated == true)
            {
                var appUser = await UserManager.GetUserAsync(user);
                if (appUser != null)
                {
                    userName = $"{appUser.FirstName} {appUser.LastName}".Trim();
                    if (string.IsNullOrWhiteSpace(userName))
                    {
                        userName = appUser.Email ?? "User";
                    }
                }
            }

            // Generate PDF
            var pdfBytes = PdfAgendaService.GenerateDailyAgenda(eventsForDay, _selectedDate, userName);

            // Download file using inline JavaScript to avoid timing issues
            var fileName = $"Daily-Agenda-{_selectedDate:yyyy-MM-dd}.pdf";
            var base64 = Convert.ToBase64String(pdfBytes);

            await JSRuntime.InvokeVoidAsync("eval", $@"
                (function() {{
                    const byteCharacters = atob('{base64}');
                    const byteNumbers = new Array(byteCharacters.length);
                    for (let i = 0; i < byteCharacters.length; i++) {{
                        byteNumbers[i] = byteCharacters.charCodeAt(i);
                    }}
                    const byteArray = new Uint8Array(byteNumbers);
                    const blob = new Blob([byteArray], {{ type: 'application/pdf' }});
                    const url = window.URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = '{fileName}';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    window.URL.revokeObjectURL(url);
                }})();
            ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating PDF: {ex.Message}");
        }
    }

    private List<Event> GetEventsForDay(DateTime date)
    {
        return _events
            .Where(e => e.StartTime.Date == date.Date)
            .OrderBy(e => e.StartTime)
            .ToList();
    }


    private async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<AppointmentData> args)
    {
        var appointment = args.Data;
        if (appointment?.Event != null)
        {
            await OpenEventDialogAsync(appointment.Event.RecurrenceParentId ?? appointment.Event.Id);
        }
    }

    private async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        await OpenEventDialogAsync(null, args.Start);
    }

    private void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<AppointmentData> args)
    {
        var evt = args.Data.Event;
        if (evt != null && _formatter != null)
        {
            // Apply event color
            var backgroundColor = _formatter.GetEventBackgroundColor(evt);
            args.Attributes["style"] = $"background-color: {backgroundColor}; border-left: 4px solid {backgroundColor};";

            // Add icon based on event type
            var icon = _formatter.GetEventIcon(evt.EventType);
            args.Data.Text = $"{icon} {evt.Title}";
        }
    }


    private string FormatTime(DateTime time)
    {
        return _formatter?.FormatTime(time) ?? time.ToString("h:mm tt");
    }

    private string FormatHourLabel(int hour)
    {
        return _formatter?.FormatHourLabel(hour) ?? $"{hour}:00";
    }

    private string GetEventBackgroundColor(Event evt)
    {
        return _formatter?.GetEventBackgroundColor(evt) ?? "#757575";
    }

    private async Task OpenEventDialogAsync(Guid? eventId, DateTime? prefilledDate = null)
    {
        if (_eventManager != null)
        {
            var saved = await _eventManager.OpenEventDialogAsync(eventId, prefilledDate);
            if (saved)
            {
                await LoadEvents();
            }
        }
    }

    private async Task EditSingleOccurrenceAsync(Event instance)
    {
        if (_eventManager != null)
        {
            var saved = await _eventManager.EditSingleOccurrenceAsync(instance);
            if (saved)
            {
                await LoadEvents();
            }
        }
    }

    private async Task DeleteSingleOccurrenceAsync(Event instance)
    {
        if (_eventManager != null)
        {
            var deleted = await _eventManager.DeleteSingleOccurrenceAsync(instance, _userId);
            if (deleted)
            {
                await LoadEvents();
            }
        }
    }

    private async Task DeleteEventAsync(Guid id)
    {
        if (_eventManager != null)
        {
            var deleted = await _eventManager.DeleteEventAsync(id, _userId);
            if (deleted)
            {
                await LoadEvents();
            }
        }
    }

    // Event Icon Mapping
    private string GetEventIcon(Core.Enums.EventType eventType)
    {
        return _formatter?.GetEventIcon(eventType) ?? "ðŸ“Œ";
    }

    // Template Creation
    private async Task CreateFromTemplate(string templateName, int durationMinutes)
    {
        if (_eventManager != null)
        {
            await _eventManager.CreateFromTemplateAsync(templateName, durationMinutes, _selectedDate, _settings, _userId);
            await LoadEvents();
            StateHasChanged();
        }
    }

    // AppointmentMove - handles drag and drop using RadzenScheduler's built-in functionality
    private async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs args)
    {
        if (_dragDropManager == null) return;

        try
        {
            var appointment = (AppointmentData)args.Appointment.Data;
            var evt = appointment?.Event;

            if (evt == null || appointment == null) return;

            // Calculate new start and end times
            var newStartTime = evt.StartTime + args.TimeSpan;
            var newEndTime = evt.EndTime + args.TimeSpan;

            // Handle recurring events with confirmation dialog
            await _dragDropManager.HandleEventDropAsync(
                evt,
                newStartTime,
                newEndTime,
                _userId,
                async () =>
                {
                    // Update the appointment data immediately for UI responsiveness
                    appointment.Start = newStartTime;
                    appointment.End = newEndTime;

                    // Reload events from database
                    await LoadEvents();

                    // Reload the scheduler
                    if (_scheduler != null)
                    {
                        await _scheduler.Reload();
                    }
                });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnAppointmentMove: {ex.Message}");
        }
    }


    // Context Menu
    private void ShowContextMenu(MouseEventArgs args, AppointmentData data)
    {
        var evt = data.Event;
        if (evt == null) return;

        var menuItems = new List<ContextMenuItem>
        {
            new ContextMenuItem { Text = "Edit", Value = data, Icon = "edit" }
        };

        // Add "Edit Series" option if this is a recurring event
        if (evt.IsRecurring || evt.RecurrenceParentId.HasValue)
        {
            menuItems.Add(new ContextMenuItem { Text = "Edit Series", Value = data, Icon = "event_repeat" });
        }

        menuItems.Add(new ContextMenuItem { Text = "Duplicate", Value = data, Icon = "content_copy" });
        menuItems.Add(new ContextMenuItem { Text = "Delete", Value = data, Icon = "delete" });

        ContextMenuService.Open(args, menuItems, OnMenuItemClick);
    }

    private async void OnMenuItemClick(MenuItemEventArgs item)
    {
        ContextMenuService.Close();

        var data = item.Value as AppointmentData;
        if (data?.Event == null) return;

        switch (item.Text)
        {
            case "Edit":
                await OpenEventDialogAsync(data.Event.Id);
                break;

            case "Edit Series":
                // For recurring events, edit the parent event
                var eventIdToEdit = data.Event.RecurrenceParentId ?? data.Event.Id;
                await OpenEventDialogAsync(eventIdToEdit);
                break;

            case "Duplicate":
                await DuplicateEventAsync(data.Event);
                break;

            case "Delete":
                await DeleteEventAsync(data.Event.Id);
                break;
        }
    }

    private async Task DuplicateEventAsync(Event originalEvent)
    {
        try
        {
            // Create a duplicate of the event
            var duplicateEvent = new Event
            {
                Id = Guid.NewGuid(),
                Title = $"{originalEvent.Title} (Copy)",
                Description = originalEvent.Description,
                StartTime = originalEvent.StartTime,
                EndTime = originalEvent.EndTime,
                Location = originalEvent.Location,
                EventType = originalEvent.EventType,
                Priority = originalEvent.Priority,
                Color = originalEvent.Color,
                UserId = _userId,
                IsAllDay = originalEvent.IsAllDay,
                IsRecurring = false, // Don't duplicate recurrence
                RecurrencePattern = RecurrencePattern.None,
                RecurrenceEndDate = null,
                RecurrenceParentId = null,
                IsRecurrenceException = false,
                RecurrenceExceptionDate = null,
                Tags = new List<string>(originalEvent.Tags),
                Attendees = new List<Attendee>(originalEvent.Attendees.Select(a => new Attendee
                {
                    Id = Guid.NewGuid(),
                    Name = a.Name,
                    Email = a.Email,
                    EventId = Guid.Empty // Will be set when saved
                })),
                CreatedAt = DateTime.UtcNow,
                HourlyCostPerAttendee = originalEvent.HourlyCostPerAttendee,
                MeetingCost = originalEvent.MeetingCost
            };

            await EventRepository.CreateAsync(duplicateEvent);
            await LoadEvents();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error duplicating event: {ex.Message}");
        }
    }

    // Cleanup
    public void Dispose()
    {
        // No cleanup needed
    }
}
