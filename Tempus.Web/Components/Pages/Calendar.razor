@page "/calendar"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Tempus.Core.Interfaces
@using Tempus.Core.Models
@using Tempus.Core.Enums
@using Tempus.Web.Components.Dialogs
@using Tempus.Web.Components.Shared
@using Microsoft.AspNetCore.Components.Rendering
@using Tempus.Web.Services
@using Microsoft.JSInterop
@attribute [Authorize]
@inject IEventRepository EventRepository
@inject ICustomRangeRepository CustomRangeRepository
@inject ISettingsService SettingsService
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IPdfAgendaService PdfAgendaService
@inject IJSRuntime JSRuntime
@inject IEmailNotificationService EmailNotificationService
@implements IDisposable

<PageTitle>Calendar - Tempus</PageTitle>

<style>
    /* Calendar Styling */
    .events-sidebar {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        animation: fadeInUp 0.6s ease-out 0.3s backwards;
    }

    .events-sidebar-title {
        font-size: 1.3rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
    }

    .no-events-message {
        text-align: center;
        padding: 2rem;
        font-style: italic;
        opacity: 0.7;
    }

    .event-detail-card {
        border-radius: 12px;
        transition: var(--transition-smooth);
    }

    .event-detail-card:hover {
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        transform: translateY(-2px);
    }

    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 400px;
    }

    /* Time Block Templates */
    .template-buttons-container {
        border-radius: 16px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        animation: fadeInUp 0.6s ease-out 0.15s backwards;
    }

    .template-buttons-title {
        font-size: 1.1rem;
        font-weight: 700;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .template-btn {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        border: none !important;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.25) !important;
        border-radius: 10px !important;
        font-weight: 600 !important;
        transition: var(--transition-smooth) !important;
        padding: 10px 16px !important;
        font-size: 0.85rem !important;
    }

    .template-btn:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 16px rgba(102, 126, 234, 0.35) !important;
    }

    .template-btn.deep-work {
        background: linear-gradient(135deg, #8E24AA 0%, #6A1B9A 100%) !important;
    }

    .template-btn.meeting {
        background: linear-gradient(135deg, #1E88E5 0%, #1565C0 100%) !important;
    }

    .template-btn.break {
        background: linear-gradient(135deg, #43A047 0%, #2E7D32 100%) !important;
    }

    .template-btn.focus {
        background: linear-gradient(135deg, #FB8C00 0%, #EF6C00 100%) !important;
    }
</style>

<div>

@if (!_isFullPageMode)
{
    <RadzenCard Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 16px; padding: 2rem; box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3); margin-bottom: 2rem;">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Gap="1rem">
            <RadzenText TextStyle="TextStyle.DisplayH4" Style="font-weight: 800; margin: 0;">ðŸ“… Calendar</RadzenText>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                <RadzenButton Icon="picture_as_pdf" ButtonStyle="ButtonStyle.Success" Click="DownloadDailyAgenda" Size="ButtonSize.Medium" Text="Day Agenda" title="Download daily agenda as PDF" />
                <RadzenButton Icon="@(_isFullPageMode ? "fullscreen_exit" : "fullscreen")"
                              Click="ToggleFullPageMode"
                              Size="ButtonSize.Medium"
                              Text="@(_isFullPageMode ? "Exit Full Page" : "Full Page")"
                              ButtonStyle="ButtonStyle.Light"
                              title="Toggle full page view" />
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
}

<RadzenCard Style="margin-bottom: 2rem;">
    <RadzenStack Gap="1rem">
        <RadzenText TextStyle="TextStyle.H6" Style="font-weight: 700;">âš¡ Quick Time Block Templates</RadzenText>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.75rem" Wrap="FlexWrap.Wrap">
            <RadzenButton Click="@(() => CreateFromTemplate("Deep Work", 120))" class="template-btn deep-work" Size="ButtonSize.Small">
                ðŸ§  Deep Work (2h)
            </RadzenButton>
            <RadzenButton Click="@(() => CreateFromTemplate("Meeting", 30))" class="template-btn meeting" Size="ButtonSize.Small">
                ðŸ‘¥ Meeting (30m)
            </RadzenButton>
            <RadzenButton Click="@(() => CreateFromTemplate("Focus Block", 90))" class="template-btn focus" Size="ButtonSize.Small">
                ðŸŽ¯ Focus Block (1.5h)
            </RadzenButton>
            <RadzenButton Click="@(() => CreateFromTemplate("Break", 15))" class="template-btn break" Size="ButtonSize.Small">
                â˜• Break (15m)
            </RadzenButton>
            <RadzenButton Click="@(() => CreateFromTemplate("Planning", 60))" class="template-btn" Size="ButtonSize.Small">
                ðŸ“‹ Planning (1h)
            </RadzenButton>
            <RadzenButton Click="@(() => CreateFromTemplate("Review", 45))" class="template-btn" Size="ButtonSize.Small">
                âœ… Review (45m)
            </RadzenButton>
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

<RadzenCard @oncontextmenu:preventDefault>
    @if (_loading)
    {
        <div class="loading-container">
            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
        </div>
    }
    else
    {
        @RenderCurrentView()
    }
</RadzenCard>


</div>

@code {
    // Appointment wrapper class for RadzenScheduler
    public class AppointmentData
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Text { get; set; } = string.Empty;
        public Event Event { get; set; } = null!;
    }

    private DateTime _selectedDate = DateTime.Today;
    private List<Event> _events = new();
    private List<AppointmentData> _appointments = new();
    private bool _loading = true;
    private Event? _contextMenuEvent;
    private DateTime? _contextMenuDate;
    private string _currentView = "Month";
    private List<CustomCalendarRange> _customRanges = new();
    private CustomCalendarRange? _selectedCustomRange;
    private CalendarSettings? _settings;

    private class ViewOption
    {
        public string Value { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
    }

    private List<ViewOption> _availableViews = new();
    private string _userId = string.Empty;
    private bool _shouldScrollToWorkHours = false;
    private DotNetObjectReference<Calendar>? _dotNetHelper;
    private bool _dragDropInitialized = false;
    private bool _isDragDropOperation = false;
    private bool _hasRenderedOnce = false;
    private bool _isFullPageMode = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                _userId = appUser.Id;
                _settings = await SettingsService.GetOrCreateDefaultSettingsAsync(_userId);

                // Apply default calendar view from settings
                _currentView = _settings.DefaultCalendarView.ToString();
            }
        }
        await LoadCustomRanges();
        LoadAvailableViews();
        await LoadEvents();

        // Trigger scroll to work hours for day/week views after content is loaded
        if (_currentView == "Day" || _currentView == "Week" || _currentView == "WorkWeek")
        {
            _shouldScrollToWorkHours = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize drag and drop
            _dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("TempusCalendar.initializeDragDrop", _dotNetHelper);
            _dragDropInitialized = true;
        }

        // Don't do any auto-scrolling or re-initialization during drag-drop operations
        if (_isDragDropOperation)
        {
            return;
        }

        // Setup drag-drop when needed (after content changes or view changes)
        if (_dragDropInitialized && !_hasRenderedOnce && (_currentView == "Week" || _currentView == "WorkWeek" || _currentView == "Day"))
        {
            // Small delay to ensure DOM is fully rendered
            await Task.Delay(100);

            // Setup drag and drop for events
            await JSRuntime.InvokeVoidAsync("TempusCalendar.makeAllEventsDraggable");
            await JSRuntime.InvokeVoidAsync("TempusCalendar.setupDropZones");
            _hasRenderedOnce = true;
        }

        if (_shouldScrollToWorkHours && (_currentView == "Week" || _currentView == "WorkWeek" || _currentView == "Day"))
        {
            _shouldScrollToWorkHours = false;
            await Task.Delay(50);
            await ScrollToWorkHours();
        }
    }

    private async Task LoadCustomRanges()
    {
        _customRanges = await CustomRangeRepository.GetAllAsync(_userId);
    }

    private async Task LoadEvents()
    {
        _loading = true;
        StateHasChanged();

        DateTime startDate, endDate;

        // For Year, Planner, and Timeline views, load entire year
        if (_currentView == "Year" || _currentView == "Planner" || _currentView == "Timeline")
        {
            startDate = new DateTime(DateTime.Today.Year, 1, 1);
            endDate = new DateTime(DateTime.Today.Year, 12, 31);
        }
        else
        {
            // For other views, load month with buffer
            var startOfMonth = new DateTime(_selectedDate.Year, _selectedDate.Month, 1);
            var endOfMonth = startOfMonth.AddMonths(1).AddDays(-1);
            startDate = startOfMonth.AddDays(-7);
            endDate = endOfMonth.AddDays(7);
        }

        _events = await EventRepository.GetEventsByDateRangeAsync(startDate, endDate, _userId);

        // Convert events to appointments for RadzenScheduler
        _appointments = _events.Select(e => new AppointmentData
        {
            Start = e.StartTime,
            End = e.EndTime,
            Text = e.Title,
            Event = e
        }).ToList();

        _loading = false;
        StateHasChanged();
    }

    private async Task OnDateChanged()
    {
        await LoadEvents();
    }

    private void LoadAvailableViews()
    {
        _availableViews = new List<ViewOption>
        {
            new ViewOption { Value = "Grid", Text = "Grid" },
            new ViewOption { Value = "Day", Text = "Day" },
            new ViewOption { Value = "WorkWeek", Text = "Work Week" },
            new ViewOption { Value = "Week", Text = "Week" },
            new ViewOption { Value = "Month", Text = "Month" },
            new ViewOption { Value = "Year", Text = "Year" },
            new ViewOption { Value = "Planner", Text = "Planner" },
            new ViewOption { Value = "Timeline", Text = "Timeline" }
        };

        // Add custom ranges
        foreach (var range in _customRanges)
        {
            _availableViews.Add(new ViewOption
            {
                Value = $"Custom_{range.Id}",
                Text = range.Name
            });
        }
    }

    private async Task OnViewChanged()
    {
        if (_currentView.StartsWith("Custom_"))
        {
            var rangeId = Guid.Parse(_currentView.Replace("Custom_", ""));
            _selectedCustomRange = _customRanges.FirstOrDefault(r => r.Id == rangeId);
        }
        else
        {
            _selectedCustomRange = null;
        }

        await LoadEvents();

        // Reset the render flag so drag-drop gets re-initialized for the new view
        _hasRenderedOnce = false;

        // Trigger scroll to work hours for day/week views after content is loaded
        if (_currentView == "Day" || _currentView == "Week" || _currentView == "WorkWeek")
        {
            _shouldScrollToWorkHours = true;
        }

        StateHasChanged();
    }

    private async Task NavigatePrevious()
    {
        _selectedDate = _currentView switch
        {
            "Day" => _selectedDate.AddDays(-1),
            "WorkWeek" => _selectedDate.AddDays(-7),
            "Week" => _selectedDate.AddDays(-7),
            "Month" => _selectedDate.AddMonths(-1),
            _ when _selectedCustomRange != null => _selectedDate.AddDays(-_selectedCustomRange.DaysCount),
            _ => _selectedDate.AddMonths(-1)
        };

        await LoadEvents();

        // Reset the render flag so drag-drop gets re-initialized
        _hasRenderedOnce = false;

        // Trigger scroll to work hours for day/week views after content is loaded
        if (_currentView == "Day" || _currentView == "Week" || _currentView == "WorkWeek")
        {
            _shouldScrollToWorkHours = true;
            StateHasChanged();
        }
    }

    private async Task NavigateNext()
    {
        _selectedDate = _currentView switch
        {
            "Day" => _selectedDate.AddDays(1),
            "WorkWeek" => _selectedDate.AddDays(7),
            "Week" => _selectedDate.AddDays(7),
            "Month" => _selectedDate.AddMonths(1),
            _ when _selectedCustomRange != null => _selectedDate.AddDays(_selectedCustomRange.DaysCount),
            _ => _selectedDate.AddMonths(1)
        };

        await LoadEvents();

        // Reset the render flag so drag-drop gets re-initialized
        _hasRenderedOnce = false;

        // Trigger scroll to work hours for day/week views after content is loaded
        if (_currentView == "Day" || _currentView == "Week" || _currentView == "WorkWeek")
        {
            _shouldScrollToWorkHours = true;
            StateHasChanged();
        }
    }

    private async Task GoToToday()
    {
        _selectedDate = DateTime.Today;

        await LoadEvents();

        // Reset the render flag so drag-drop gets re-initialized
        _hasRenderedOnce = false;

        // Trigger scroll to work hours for day/week views after content is loaded
        if (_currentView == "Day" || _currentView == "Week" || _currentView == "WorkWeek")
        {
            _shouldScrollToWorkHours = true;
            StateHasChanged();
        }
    }

    private string GetCurrentViewTitle()
    {
        return _currentView switch
        {
            "Grid" => "All Events",
            "Day" => _selectedDate.ToString("MMMM dd, yyyy"),
            "WorkWeek" or "Week" => $"{GetWeekStart().ToString("MMM dd")} - {GetWeekEnd().ToString("MMM dd, yyyy")}",
            "Month" => _selectedDate.ToString("MMMM yyyy"),
            "Year" => DateTime.Today.Year.ToString(),
            "Planner" => $"Year Planner - {DateTime.Today.Year}",
            "Timeline" => $"Timeline - {DateTime.Today.Year}",
            _ when _selectedCustomRange != null => $"{GetCustomRangeStart().ToString("MMM dd")} - {GetCustomRangeEnd().ToString("MMM dd, yyyy")}",
            _ => _selectedDate.ToString("MMMM yyyy")
        };
    }

    private async Task OpenCustomRangeDialog()
    {
        var result = await DialogService.OpenAsync<CustomRangeDialog>(
            "Create Custom Calendar Range",
            null,
            new DialogOptions
            {
                Width = "500px",
                Height = "auto",
                Resizable = false,
                Draggable = true
            });

        if (result is CustomCalendarRange newRange)
        {
            // Save to database
            var savedRange = await CustomRangeRepository.CreateAsync(newRange);
            _customRanges.Add(savedRange);
            LoadAvailableViews();
            _currentView = $"Custom_{savedRange.Id}";
            _selectedCustomRange = savedRange;
            await LoadEvents();
            StateHasChanged();
        }
    }

    private async Task DownloadDailyAgenda()
    {
        try
        {
            // Get events for the selected date
            var eventsForDay = GetEventsForDay(_selectedDate);

            // Get user name
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userName = "User";
            if (user.Identity?.IsAuthenticated == true)
            {
                var appUser = await UserManager.GetUserAsync(user);
                if (appUser != null)
                {
                    userName = $"{appUser.FirstName} {appUser.LastName}".Trim();
                    if (string.IsNullOrWhiteSpace(userName))
                    {
                        userName = appUser.Email ?? "User";
                    }
                }
            }

            // Generate PDF
            var pdfBytes = PdfAgendaService.GenerateDailyAgenda(eventsForDay, _selectedDate, userName);

            // Download file using inline JavaScript to avoid timing issues
            var fileName = $"Daily-Agenda-{_selectedDate:yyyy-MM-dd}.pdf";
            var base64 = Convert.ToBase64String(pdfBytes);

            await JSRuntime.InvokeVoidAsync("eval", $@"
                (function() {{
                    const byteCharacters = atob('{base64}');
                    const byteNumbers = new Array(byteCharacters.length);
                    for (let i = 0; i < byteCharacters.length; i++) {{
                        byteNumbers[i] = byteCharacters.charCodeAt(i);
                    }}
                    const byteArray = new Uint8Array(byteNumbers);
                    const blob = new Blob([byteArray], {{ type: 'application/pdf' }});
                    const url = window.URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = '{fileName}';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    window.URL.revokeObjectURL(url);
                }})();
            ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating PDF: {ex.Message}");
        }
    }

    private List<List<DateTime>> GetCalendarWeeks()
    {
        var firstDayOfMonth = new DateTime(_selectedDate.Year, _selectedDate.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

        // Use start of week from settings
        var startOfWeek = _settings?.StartOfWeek ?? DayOfWeek.Sunday;

        // Calculate days to subtract to get to the start of week
        var daysToSubtract = ((int)firstDayOfMonth.DayOfWeek - (int)startOfWeek + 7) % 7;
        var startDate = firstDayOfMonth.AddDays(-daysToSubtract);

        var daysToAdd = (6 - ((int)lastDayOfMonth.DayOfWeek - (int)startOfWeek + 7) % 7);
        var endDate = lastDayOfMonth.AddDays(daysToAdd);

        var weeks = new List<List<DateTime>>();
        var currentWeek = new List<DateTime>();

        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            currentWeek.Add(date);
            if (currentWeek.Count == 7)
            {
                weeks.Add(currentWeek);
                currentWeek = new List<DateTime>();
            }
        }

        return weeks;
    }

    private List<Event> GetEventsForDay(DateTime date)
    {
        return _events
            .Where(e => e.StartTime.Date == date.Date)
            .OrderBy(e => e.StartTime)
            .ToList();
    }

    private DateTime GetWeekStart()
    {
        var startOfWeek = _settings?.StartOfWeek ?? DayOfWeek.Sunday;
        var diff = ((int)_selectedDate.DayOfWeek - (int)startOfWeek + 7) % 7;
        return _selectedDate.AddDays(-diff).Date;
    }

    private DateTime GetWeekEnd()
    {
        return GetWeekStart().AddDays(6);
    }

    private DateTime GetWorkWeekStart()
    {
        var diff = _selectedDate.DayOfWeek - DayOfWeek.Monday;
        if (diff < 0) diff += 7;
        return _selectedDate.AddDays(-diff).Date;
    }

    private DateTime GetWorkWeekEnd()
    {
        return GetWorkWeekStart().AddDays(4); // Monday to Friday
    }

    private DateTime GetCustomRangeStart()
    {
        return _selectedDate.Date;
    }

    private DateTime GetCustomRangeEnd()
    {
        if (_selectedCustomRange == null) return _selectedDate;
        return _selectedDate.AddDays(_selectedCustomRange.DaysCount - 1);
    }

    private List<DateTime> GetDaysForCurrentView()
    {
        return _currentView switch
        {
            "Day" => new List<DateTime> { _selectedDate.Date },
            "WorkWeek" => GetWorkWeekDays(),
            "Week" => GetWeekDays(),
            "Month" => GetMonthDays(),
            _ when _selectedCustomRange != null => GetCustomRangeDays(),
            _ => GetMonthDays()
        };
    }

    private List<DateTime> GetWorkWeekDays()
    {
        var days = new List<DateTime>();
        var start = GetWorkWeekStart();
        for (int i = 0; i < 5; i++)
        {
            days.Add(start.AddDays(i));
        }
        return days;
    }

    private List<DateTime> GetWeekDays()
    {
        var days = new List<DateTime>();
        var start = GetWeekStart();
        var showWeekends = _settings?.ShowWeekendInWeekView ?? true;

        for (int i = 0; i < 7; i++)
        {
            var day = start.AddDays(i);
            if (showWeekends || (day.DayOfWeek != DayOfWeek.Saturday && day.DayOfWeek != DayOfWeek.Sunday))
            {
                days.Add(day);
            }
        }
        return days;
    }

    private List<DateTime> GetMonthDays()
    {
        var days = new List<DateTime>();
        foreach (var week in GetCalendarWeeks())
        {
            days.AddRange(week);
        }
        return days;
    }

    private List<DateTime> GetCustomRangeDays()
    {
        if (_selectedCustomRange == null) return new List<DateTime>();

        var days = new List<DateTime>();
        var start = GetCustomRangeStart();

        for (int i = 0; i < _selectedCustomRange.DaysCount; i++)
        {
            var day = start.AddDays(i);
            if (_selectedCustomRange.ShowWeekends || (day.DayOfWeek != DayOfWeek.Saturday && day.DayOfWeek != DayOfWeek.Sunday))
            {
                days.Add(day);
            }
        }
        return days;
    }

    private RenderFragment RenderCurrentView() => builder =>
    {
        if (_currentView == "Grid")
        {
            RenderGridView(builder);
        }
        else
        {
            RenderSchedulerView(builder);
        }
    };

    private void RenderGridView(RenderTreeBuilder builder)
    {
        builder.OpenComponent<EventsGrid>(0);
        builder.AddAttribute(1, "Events", _events);
        builder.AddAttribute(2, "IsLoading", _loading);
        builder.AddAttribute(3, "OnSearch", EventCallback.Factory.Create<string>(this, SearchEventsFromGrid));
        builder.AddAttribute(4, "OnEditEvent", EventCallback.Factory.Create<Guid>(this, EditEventFromGrid));
        builder.AddAttribute(5, "OnDeleteEvent", EventCallback.Factory.Create<Guid>(this, DeleteEventAsync));
        builder.AddAttribute(6, "OnCreateEvent", EventCallback.Factory.Create(this, CreateEventFromGrid));
        builder.CloseComponent();
    }

    private void RenderSchedulerView(RenderTreeBuilder builder)
    {
        builder.OpenComponent<RadzenScheduler<AppointmentData>>(0);
        builder.AddAttribute(1, "Data", _appointments);
        builder.AddAttribute(2, "TItem", typeof(AppointmentData));
        builder.AddAttribute(3, "StartProperty", "Start");
        builder.AddAttribute(4, "EndProperty", "End");
        builder.AddAttribute(5, "TextProperty", "Text");
        builder.AddAttribute(6, "SelectedIndex", GetSelectedViewIndex());
        builder.AddAttribute(7, "AppointmentSelect", EventCallback.Factory.Create<SchedulerAppointmentSelectEventArgs<AppointmentData>>(this, OnAppointmentSelect));
        builder.AddAttribute(8, "SlotSelect", EventCallback.Factory.Create<SchedulerSlotSelectEventArgs>(this, OnSlotSelect));
        builder.AddAttribute(9, "AppointmentRender", new Action<SchedulerAppointmentRenderEventArgs<AppointmentData>>(OnAppointmentRender));

        // Add child content for views
        builder.AddAttribute(10, "ChildContent", (RenderFragment)(b =>
        {
            // Month View
            b.OpenComponent<RadzenMonthView>(0);
            b.CloseComponent();

            // Week View
            b.OpenComponent<RadzenWeekView>(1);
            b.CloseComponent();

            // Day View
            b.OpenComponent<RadzenDayView>(2);
            b.CloseComponent();

            // Year View
            b.OpenComponent<RadzenYearView>(3);
            b.CloseComponent();

            // Year Planner View
            b.OpenComponent<RadzenYearPlannerView>(4);
            b.CloseComponent();

            // Year Timeline View
            b.OpenComponent<RadzenYearTimelineView>(5);
            b.CloseComponent();
        }));

        builder.CloseComponent();
    }

    private int GetSelectedViewIndex()
    {
        return _currentView switch
        {
            "Month" => 0,
            "Week" => 1,
            "WorkWeek" => 1,
            "Day" => 2,
            "Year" => 3,
            "Planner" => 4,
            "Timeline" => 5,
            _ => 0
        };
    }

    private async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<AppointmentData> args)
    {
        var appointment = args.Data;
        if (appointment?.Event != null)
        {
            await OpenEventDialogAsync(appointment.Event.RecurrenceParentId ?? appointment.Event.Id);
        }
    }

    private async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        await OpenEventDialogAsync(null, args.Start);
    }

    private void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<AppointmentData> args)
    {
        var evt = args.Data.Event;
        if (evt != null)
        {
            // Apply event color
            var backgroundColor = GetEventBackgroundColor(evt);
            args.Attributes["style"] = $"background-color: {backgroundColor}; border-left: 4px solid {backgroundColor};";

            // Add icon based on event type
            var icon = GetEventIcon(evt.EventType);
            args.Data.Text = $"{icon} {evt.Title}";
        }
    }

    private async Task SearchEventsFromGrid(string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadEvents();
        }
        else
        {
            _loading = true;
            _events = await EventRepository.SearchAsync(searchTerm, _userId);
            _loading = false;
        }
    }

    private async Task EditEventFromGrid(Guid eventId)
    {
        await OpenEventDialogAsync(eventId);
    }

    private async Task CreateEventFromGrid()
    {
        await OpenEventDialogAsync(null, DateTime.Today);
    }






    private string FormatTime(DateTime time)
    {
        var format = _settings?.TimeFormat ?? TimeFormat.TwelveHour;
        return format == TimeFormat.TwelveHour
            ? time.ToString("h:mm tt")
            : time.ToString("HH:mm");
    }

    private string FormatHourLabel(int hour)
    {
        var format = _settings?.TimeFormat ?? TimeFormat.TwelveHour;
        if (format == TimeFormat.TwelveHour)
        {
            return hour == 0 ? "12 AM" :
                   hour < 12 ? $"{hour} AM" :
                   hour == 12 ? "12 PM" :
                   $"{hour - 12} PM";
        }
        else
        {
            return $"{hour:00}:00";
        }
    }

    private string GetEventBackgroundColor(Event evt)
    {
        // If the event has a custom color, use it
        if (!string.IsNullOrEmpty(evt.Color))
        {
            return evt.Color;
        }

        // Otherwise, use color based on event type
        return evt.EventType switch
        {
            Core.Enums.EventType.Meeting => "#1E88E5",      // Blue
            Core.Enums.EventType.Appointment => "#43A047",  // Green
            Core.Enums.EventType.Task => "#FB8C00",         // Orange
            Core.Enums.EventType.TimeBlock => "#8E24AA",    // Purple
            Core.Enums.EventType.Reminder => "#FDD835",     // Yellow
            Core.Enums.EventType.Deadline => "#E53935",     // Red
            _ => "#757575"                                   // Gray
        };
    }

    private void ShowEventContextMenu(MouseEventArgs args, Event evt)
    {
        _contextMenuEvent = evt;

        // Check if this is a recurring event instance or parent
        var isRecurringInstance = evt.RecurrenceParentId.HasValue;
        var isRecurringParent = evt.IsRecurring && !evt.RecurrenceParentId.HasValue;

        var menuItems = new List<ContextMenuItem>();

        if (isRecurringInstance || isRecurringParent)
        {
            // Options for recurring event instance or parent
            menuItems.Add(new ContextMenuItem { Text = "Edit This Occurrence", Icon = "edit", Value = "edit-single" });
            menuItems.Add(new ContextMenuItem { Text = "Edit All Occurrences", Icon = "edit_note", Value = "edit-all" });
            menuItems.Add(new ContextMenuItem { Text = "Delete This Occurrence", Icon = "delete", Value = "delete-single" });
            menuItems.Add(new ContextMenuItem { Text = "Delete All Occurrences", Icon = "delete_forever", Value = "delete-all" });
        }
        else
        {
            // Options for regular event
            menuItems.Add(new ContextMenuItem { Text = "Edit", Icon = "edit", Value = "edit" });
            menuItems.Add(new ContextMenuItem { Text = "Delete", Icon = "delete", Value = "delete" });
        }

        ContextMenuService.Open(args, menuItems, OnEventContextMenuClick);
    }

    private void ShowAddEventContextMenu(MouseEventArgs args, DateTime date)
    {
        _contextMenuDate = date;
        ContextMenuService.Open(args, new List<ContextMenuItem>
        {
            new ContextMenuItem { Text = "Add Event", Icon = "add", Value = "add" }
        }, OnAddEventContextMenuClick);
    }

    private void OnEventContextMenuClick(MenuItemEventArgs args)
    {
        if (_contextMenuEvent == null) return;

        var action = args.Value?.ToString();
        switch (action)
        {
            case "edit":
                _ = OpenEventDialogAsync(_contextMenuEvent.Id);
                break;
            case "edit-single":
                _ = EditSingleOccurrenceAsync(_contextMenuEvent);
                break;
            case "edit-all":
                _ = OpenEventDialogAsync(_contextMenuEvent.RecurrenceParentId ?? _contextMenuEvent.Id);
                break;
            case "delete":
                _ = DeleteEventAsync(_contextMenuEvent.Id);
                break;
            case "delete-single":
                _ = DeleteSingleOccurrenceAsync(_contextMenuEvent);
                break;
            case "delete-all":
                _ = DeleteEventAsync(_contextMenuEvent.RecurrenceParentId ?? _contextMenuEvent.Id);
                break;
        }
        ContextMenuService.Close();
        _contextMenuEvent = null;
    }

    private void OnAddEventContextMenuClick(MenuItemEventArgs args)
    {
        if (_contextMenuDate.HasValue)
        {
            _ = OpenEventDialogAsync(null, _contextMenuDate.Value);
        }
        ContextMenuService.Close();
        _contextMenuDate = null;
    }

    private async Task OpenEventDialogAsync(Guid? eventId, DateTime? prefilledDate = null)
    {
        var parameters = new Dictionary<string, object>();

        if (eventId.HasValue)
        {
            parameters.Add("EventId", eventId.Value);
        }

        if (prefilledDate.HasValue)
        {
            parameters.Add("PrefilledDate", prefilledDate.Value);
        }

        var result = await DialogService.OpenAsync<EventFormDialog>(
            eventId.HasValue ? "Edit Event" : "Create Event",
            parameters,
            new DialogOptions
            {
                Width = "600px",
                Height = "auto",
                Resizable = true,
                Draggable = true
            });

        // If the dialog was saved (result == true), reload events
        if (result is bool saved && saved)
        {
            await LoadEvents();
        }
    }

    private async Task EditSingleOccurrenceAsync(Event instance)
    {
        if (!instance.RecurrenceParentId.HasValue) return;

        // Open dialog with the instance data and EditSingleOccurrence flag
        var parameters = new Dictionary<string, object>
        {
            { "EditSingleOccurrence", true },
            { "InstanceEvent", instance }
        };

        var result = await DialogService.OpenAsync<EventFormDialog>(
            "Edit This Occurrence",
            parameters,
            new DialogOptions
            {
                Width = "600px",
                Height = "auto",
                Resizable = true,
                Draggable = true
            });

        // If the dialog was saved, reload events
        if (result is bool saved && saved)
        {
            await LoadEvents();
        }
    }

    private async Task DeleteSingleOccurrenceAsync(Event instance)
    {
        if (!instance.RecurrenceParentId.HasValue) return;

        var result = await DialogService.Confirm(
            "Are you sure you want to delete this occurrence?",
            "Delete Occurrence",
            new ConfirmOptions() { OkButtonText = "Delete", CancelButtonText = "Cancel" });

        if (result == true)
        {
            // Create a "tombstone" exception to mark this date as deleted
            var exceptionEvent = new Event
            {
                Id = Guid.NewGuid(),
                Title = "(Deleted)",
                StartTime = instance.StartTime,
                EndTime = instance.EndTime,
                UserId = _userId,
                IsRecurring = false,
                IsRecurrenceException = true,
                RecurrenceExceptionDate = instance.StartTime.Date,
                RecurrenceParentId = instance.RecurrenceParentId.Value,
                CreatedAt = DateTime.UtcNow,
                Tags = new List<string>(),
                Attendees = new List<Attendee>()
            };

            await EventRepository.CreateAsync(exceptionEvent);
            await LoadEvents();
        }
    }

    private async Task DeleteEventAsync(Guid id)
    {
        var result = await DialogService.Confirm(
            "Are you sure you want to delete this event?",
            "Delete Event",
            new ConfirmOptions() { OkButtonText = "Delete", CancelButtonText = "Cancel" });

        if (result == true)
        {
            await EventRepository.DeleteAsync(id, _userId);
            await LoadEvents();
        }
    }

    private async Task ScrollToWorkHours()
    {
        try
        {
            var workStartHour = _settings?.WorkHoursStart.Hours ?? 8;
            var workStartMinute = _settings?.WorkHoursStart.Minutes ?? 0;

            // Each hour is 60px tall, calculate exact pixel position
            var scrollPosition = (workStartHour * 60) + workStartMinute;

            var containerId = _currentView == "Day" ? "day-view-container" : "multi-day-view-container";

            await JSRuntime.InvokeVoidAsync("eval", $@"
                (function() {{
                    var container = document.getElementById('{containerId}');
                    if (container) {{
                        container.scrollTop = {scrollPosition};
                    }}
                }})();
            ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scrolling to work hours: {ex.Message}");
        }
    }


    // Event Icon Mapping
    private string GetEventIcon(Core.Enums.EventType eventType)
    {
        return eventType switch
        {
            Core.Enums.EventType.Meeting => "ðŸ‘¥",
            Core.Enums.EventType.Appointment => "ðŸ“…",
            Core.Enums.EventType.Task => "âœ“",
            Core.Enums.EventType.TimeBlock => "ðŸŽ¯",
            Core.Enums.EventType.Reminder => "ðŸ””",
            Core.Enums.EventType.Deadline => "âš¡",
            _ => "ðŸ“Œ"
        };
    }

    // Template Creation
    private async Task CreateFromTemplate(string templateName, int durationMinutes)
    {
        // Find the next available time slot starting from current time or work hours
        var now = DateTime.Now;
        var startTime = now;

        // If viewing a different day, use that day at work start time
        if (_selectedDate.Date != DateTime.Today)
        {
            var workStartHour = _settings?.WorkHoursStart.Hours ?? 8;
            startTime = _selectedDate.Date.AddHours(workStartHour);
        }
        else
        {
            // Round to next 15-minute interval
            var minutes = startTime.Minute;
            var roundedMinutes = ((minutes + 14) / 15) * 15;
            startTime = startTime.Date.AddHours(startTime.Hour).AddMinutes(roundedMinutes);
        }

        var endTime = startTime.AddMinutes(durationMinutes);

        // Determine event type based on template
        var eventType = templateName.ToLower() switch
        {
            "meeting" => Core.Enums.EventType.Meeting,
            "break" => Core.Enums.EventType.TimeBlock,
            _ => Core.Enums.EventType.TimeBlock
        };

        // Create the event
        var newEvent = new Event
        {
            Id = Guid.NewGuid(),
            Title = templateName,
            StartTime = startTime,
            EndTime = endTime,
            EventType = eventType,
            Priority = Core.Enums.Priority.Medium,
            UserId = _userId,
            CreatedAt = DateTime.UtcNow,
            Tags = new List<string>(),
            Attendees = new List<Attendee>()
        };

        await EventRepository.CreateAsync(newEvent);
        await LoadEvents();
        StateHasChanged();
    }

    // Drag and Drop Callback
    [JSInvokable]
    public async Task OnEventDropped(string eventId, int dayIndex, int hour, int minute)
    {
        try
        {
            // Mark that we're in a drag-drop operation to prevent auto-scrolling
            _isDragDropOperation = true;

            // Save scroll position before making changes
            var scrollPosition = await SaveScrollPosition();

            var evt = _events.FirstOrDefault(e => e.Id.ToString() == eventId);
            if (evt == null)
            {
                _isDragDropOperation = false;
                return;
            }

            // Calculate the new date based on day index and current view
            DateTime newDate = _selectedDate.Date;

            if (_currentView == "Week" || _currentView == "WorkWeek")
            {
                var days = _currentView == "Week" ? GetWeekDays() : GetWorkWeekDays();
                if (dayIndex >= 0 && dayIndex < days.Count)
                {
                    newDate = days[dayIndex].Date;
                }
            }

            var newStartTime = newDate.AddHours(hour).AddMinutes(minute);
            var duration = evt.EndTime - evt.StartTime;
            var newEndTime = newStartTime.Add(duration);

            // Check if this is a recurring event
            bool isRecurringInstance = evt.RecurrenceParentId.HasValue;
            bool isRecurringParent = evt.IsRecurring && !evt.RecurrenceParentId.HasValue;

            if (isRecurringInstance || isRecurringParent)
            {
                // Ask user if they want to reschedule all occurrences or just this one
                var result = await ShowRescheduleConfirmationDialog(evt, newStartTime, newEndTime);

                if (result == null)
                {
                    // User cancelled - restore scroll position
                    await RestoreScrollPosition(scrollPosition);
                    _isDragDropOperation = false;
                    return;
                }

                if (result.Value) // Reschedule all occurrences
                {
                    await RescheduleAllOccurrences(evt, newStartTime, newEndTime);
                }
                else // Reschedule only this occurrence
                {
                    await RescheduleSingleOccurrence(evt, newStartTime, newEndTime);
                }
            }
            else
            {
                // Regular event - just reschedule it
                await RescheduleEvent(evt, newStartTime, newEndTime);
            }

            await LoadEvents();
            StateHasChanged();

            // Restore scroll position after the update
            await RestoreScrollPosition(scrollPosition);

            // Re-enable drag-drop setup for the new events
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("TempusCalendar.makeAllEventsDraggable");
            await JSRuntime.InvokeVoidAsync("TempusCalendar.setupDropZones");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnEventDropped: {ex.Message}");
        }
        finally
        {
            // Always clear the flag
            _isDragDropOperation = false;
        }
    }

    private async Task<bool?> ShowRescheduleConfirmationDialog(Event evt, DateTime newStartTime, DateTime newEndTime)
    {
        var options = new List<string>
        {
            "This occurrence only",
            "All occurrences"
        };

        var result = await DialogService.Confirm(
            $"Do you want to reschedule all occurrences or just this one?\n\nNew time: {FormatDateTime(newStartTime)} - {FormatTime(newEndTime)}",
            "Reschedule Recurring Event",
            new ConfirmOptions
            {
                OkButtonText = "This occurrence only",
                CancelButtonText = "Cancel",
                Width = "500px"
            });

        if (result == null) return null; // Cancelled

        // Show second dialog for "All occurrences" option
        var allOccurrences = await DialogService.Confirm(
            "Reschedule all occurrences of this event?",
            "Confirm",
            new ConfirmOptions
            {
                OkButtonText = "All occurrences",
                CancelButtonText = "This occurrence only",
                Width = "400px"
            });

        return allOccurrences ?? false;
    }

    private async Task RescheduleEvent(Event evt, DateTime newStartTime, DateTime newEndTime)
    {
        var originalEvent = new Event
        {
            Id = evt.Id,
            Title = evt.Title,
            StartTime = evt.StartTime,
            EndTime = evt.EndTime,
            Location = evt.Location,
            Description = evt.Description,
            EventType = evt.EventType,
            Attendees = evt.Attendees
        };

        evt.StartTime = newStartTime;
        evt.EndTime = newEndTime;

        await EventRepository.UpdateAsync(evt);

        // Send meeting update notifications if this is a meeting with attendees
        if (evt.EventType == Core.Enums.EventType.Meeting && evt.Attendees.Any())
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var appUser = await UserManager.GetUserAsync(user);
            var organizerName = appUser != null ? $"{appUser.FirstName} {appUser.LastName}".Trim() : "Unknown";
            if (string.IsNullOrWhiteSpace(organizerName)) organizerName = appUser?.Email ?? "Unknown";

            await EmailNotificationService.SendMeetingUpdateAsync(
                originalEvent,
                evt,
                organizerName,
                MeetingUpdateType.Rescheduled
            );
        }
    }

    private async Task RescheduleSingleOccurrence(Event evt, DateTime newStartTime, DateTime newEndTime)
    {
        // Create an exception for this occurrence
        var exceptionEvent = new Event
        {
            Id = Guid.NewGuid(),
            Title = evt.Title,
            Description = evt.Description,
            StartTime = newStartTime,
            EndTime = newEndTime,
            Location = evt.Location,
            EventType = evt.EventType,
            Priority = evt.Priority,
            Color = evt.Color,
            UserId = evt.UserId,
            IsRecurring = false,
            IsRecurrenceException = true,
            RecurrenceExceptionDate = evt.StartTime.Date,
            RecurrenceParentId = evt.RecurrenceParentId ?? evt.Id,
            CreatedAt = DateTime.UtcNow,
            Tags = new List<string>(evt.Tags),
            Attendees = new List<Attendee>(evt.Attendees.Select(a => new Attendee
            {
                Name = a.Name,
                Email = a.Email
            }))
        };

        await EventRepository.CreateAsync(exceptionEvent);

        // Send meeting update for this occurrence only
        if (evt.EventType == Core.Enums.EventType.Meeting && evt.Attendees.Any())
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var appUser = await UserManager.GetUserAsync(user);
            var organizerName = appUser != null ? $"{appUser.FirstName} {appUser.LastName}".Trim() : "Unknown";
            if (string.IsNullOrWhiteSpace(organizerName)) organizerName = appUser?.Email ?? "Unknown";

            var originalOccurrence = new Event
            {
                Title = evt.Title,
                StartTime = evt.StartTime,
                EndTime = evt.EndTime,
                Location = evt.Location,
                Attendees = evt.Attendees
            };

            await EmailNotificationService.SendMeetingUpdateAsync(
                originalOccurrence,
                exceptionEvent,
                organizerName,
                MeetingUpdateType.Rescheduled
            );
        }
    }

    private async Task RescheduleAllOccurrences(Event evt, DateTime newStartTime, DateTime newEndTime)
    {
        var parentId = evt.RecurrenceParentId ?? evt.Id;
        var parentEvent = evt.RecurrenceParentId.HasValue
            ? await EventRepository.GetByIdAsync(parentId, _userId)
            : evt;

        if (parentEvent == null) return;

        // Calculate the time difference
        var timeDiff = newStartTime - evt.StartTime;

        var originalEvent = new Event
        {
            Id = parentEvent.Id,
            Title = parentEvent.Title,
            StartTime = parentEvent.StartTime,
            EndTime = parentEvent.EndTime,
            Location = parentEvent.Location,
            Description = parentEvent.Description,
            EventType = parentEvent.EventType,
            Attendees = parentEvent.Attendees
        };

        // Update the parent event's time
        parentEvent.StartTime = parentEvent.StartTime.Add(timeDiff);
        parentEvent.EndTime = parentEvent.EndTime.Add(timeDiff);

        await EventRepository.UpdateAsync(parentEvent);

        // Send meeting update for all occurrences
        if (parentEvent.EventType == Core.Enums.EventType.Meeting && parentEvent.Attendees.Any())
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var appUser = await UserManager.GetUserAsync(user);
            var organizerName = appUser != null ? $"{appUser.FirstName} {appUser.LastName}".Trim() : "Unknown";
            if (string.IsNullOrWhiteSpace(organizerName)) organizerName = appUser?.Email ?? "Unknown";

            await EmailNotificationService.SendMeetingUpdateAsync(
                originalEvent,
                parentEvent,
                organizerName,
                MeetingUpdateType.Rescheduled
            );
        }
    }

    private string FormatDateTime(DateTime dt)
    {
        return dt.ToString("dddd, MMMM dd, yyyy 'at' h:mm tt");
    }

    // Scroll Position Management
    private async Task<int> SaveScrollPosition()
    {
        try
        {
            var containerId = _currentView == "Day" ? "day-view-container" : "multi-day-view-container";
            var scrollTop = await JSRuntime.InvokeAsync<int>("eval", $@"
                (function() {{
                    var container = document.getElementById('{containerId}');
                    return container ? container.scrollTop : 0;
                }})();
            ");
            return scrollTop;
        }
        catch
        {
            return 0;
        }
    }

    private async Task RestoreScrollPosition(int scrollPosition)
    {
        try
        {
            var containerId = _currentView == "Day" ? "day-view-container" : "multi-day-view-container";

            // Small delay to ensure DOM is fully rendered
            await Task.Delay(50);

            await JSRuntime.InvokeVoidAsync("eval", $@"
                (function() {{
                    var container = document.getElementById('{containerId}');
                    if (container) {{
                        container.scrollTop = {scrollPosition};
                    }}
                }})();
            ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error restoring scroll position: {ex.Message}");
        }
    }

    // Toggle Full Page Mode
    private void ToggleFullPageMode()
    {
        _isFullPageMode = !_isFullPageMode;
        StateHasChanged();
    }

    // Cleanup
    public void Dispose()
    {
        _dotNetHelper?.Dispose();
    }
}
