@page "/calendar"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Tempus.Core.Interfaces
@using Tempus.Core.Models
@using Tempus.Core.Enums
@using Tempus.Web.Components.Dialogs
@using Tempus.Web.Components.Shared
@using Microsoft.AspNetCore.Components.Rendering
@attribute [Authorize]
@inject IEventRepository EventRepository
@inject ICustomRangeRepository CustomRangeRepository
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Calendar - Tempus</PageTitle>

<style>
    /* Premium Calendar Styling */
    .calendar-header {
        background: var(--primary-gradient);
        color: white;
        padding: 2rem;
        border-radius: 16px;
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        margin-bottom: 2rem;
        animation: fadeInUp 0.6s ease-out;
    }

    .calendar-title {
        font-size: 2.5rem;
        font-weight: 800;
        margin: 0;
    }

    .calendar-controls {
        background: white;
        border-radius: 16px;
        padding: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
        animation: fadeInUp 0.6s ease-out 0.1s backwards;
    }

    .calendar-nav-btn {
        border-radius: 10px !important;
        transition: var(--transition-smooth) !important;
    }

    .calendar-nav-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .calendar-view-title {
        font-size: 1.5rem;
        font-weight: 700;
        background: var(--primary-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .calendar-main {
        background: white;
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        animation: fadeInUp 0.6s ease-out 0.2s backwards;
    }

    .calendar-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 8px;
    }

    .calendar-header-cell {
        padding: 1rem;
        text-align: center;
        font-weight: 700;
        font-size: 0.9rem;
        color: #667eea;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .calendar-day-cell {
        vertical-align: top;
        min-width: 120px;
        height: 120px;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        padding: 12px;
        cursor: context-menu;
        background: white;
        transition: var(--transition-smooth);
        position: relative;
        overflow: hidden;
    }

    .calendar-day-cell:hover {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        border-color: #667eea;
        box-shadow: 0 8px 20px rgba(102, 126, 234, 0.15);
        transform: translateY(-2px);
    }

    .calendar-day-cell.today {
        background: linear-gradient(135deg, #667eea15 0%, #764ba220 100%);
        border: 2px solid #667eea;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.2);
    }

    .calendar-day-cell.other-month {
        opacity: 0.4;
    }

    .calendar-day-number {
        font-weight: 700;
        font-size: 1.1rem;
        margin-bottom: 8px;
    }

    .calendar-day-number.today {
        color: #667eea;
        font-size: 1.3rem;
    }

    .event-badge {
        display: block;
        font-size: 0.7rem;
        margin-top: 4px;
        padding: 4px 8px;
        border-radius: 8px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        transition: var(--transition-smooth);
        cursor: pointer;
        font-weight: 600;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }

    .event-badge:hover {
        transform: scale(1.05) translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
        z-index: 10;
    }

    .event-detail-card {
        border-radius: 12px;
        transition: var(--transition-smooth);
        border: 1px solid #e9ecef;
    }

    .event-detail-card:hover {
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        transform: translateY(-2px);
        border-color: #667eea;
    }

    .events-sidebar {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        animation: fadeInUp 0.6s ease-out 0.3s backwards;
    }

    .events-sidebar-title {
        font-size: 1.3rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        color: #2d3748;
    }

    .no-events-message {
        text-align: center;
        padding: 2rem;
        color: #718096;
        font-style: italic;
    }

    .create-event-btn {
        background: var(--primary-gradient) !important;
        border: none !important;
        box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3) !important;
        border-radius: 12px !important;
        font-weight: 600 !important;
        transition: var(--transition-smooth) !important;
    }

    .create-event-btn:hover {
        transform: translateY(-3px) !important;
        box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4) !important;
    }

    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 400px;
    }

    /* Day View with Hours Styling */
    .day-view-container {
        display: flex;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        overflow: hidden;
    }

    .time-column {
        width: 80px;
        background: #f8f9fa;
        border-right: 2px solid #e9ecef;
    }

    .time-slot {
        height: 60px;
        padding: 8px;
        text-align: right;
        font-size: 0.85rem;
        color: #718096;
        font-weight: 600;
        border-bottom: 1px solid #e9ecef;
        position: relative;
    }

    .time-slot:first-child {
        border-top: 1px solid #e9ecef;
    }

    .day-column {
        flex: 1;
        position: relative;
        min-width: 200px;
    }

    .hour-row {
        height: 60px;
        border-bottom: 1px solid #e9ecef;
        position: relative;
    }

    .hour-row:first-child {
        border-top: 1px solid #e9ecef;
    }

    .hour-row:hover {
        background: #f8f9fa;
    }

    .timed-event {
        position: absolute;
        left: 4px;
        right: 4px;
        border-radius: 8px;
        padding: 8px;
        color: white;
        font-size: 0.85rem;
        font-weight: 600;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        transition: var(--transition-smooth);
        overflow: hidden;
        z-index: 1;
    }

    .timed-event:hover {
        transform: translateX(2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
        z-index: 10;
    }

    .timed-event-title {
        font-weight: 700;
        margin-bottom: 2px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .timed-event-time {
        font-size: 0.75rem;
        opacity: 0.9;
    }

    .current-time-indicator {
        position: absolute;
        left: 0;
        right: 0;
        height: 2px;
        background: #e53935;
        z-index: 5;
        pointer-events: none;
    }

    .current-time-indicator::before {
        content: '';
        position: absolute;
        left: -4px;
        top: -3px;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #e53935;
    }

    /* Multi-Day Hour View (Work Week & Week) */
    .multi-day-hour-view {
        display: flex;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        overflow: hidden;
    }

    .multi-day-columns {
        display: flex;
        flex: 1;
        overflow-x: auto;
    }

    .day-hour-column {
        flex: 1;
        min-width: 150px;
        border-right: 1px solid #e9ecef;
        position: relative;
    }

    .day-hour-column:last-child {
        border-right: none;
    }

    .day-hour-header {
        position: sticky;
        top: 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 12px 8px;
        text-align: center;
        font-weight: 700;
        font-size: 0.9rem;
        border-bottom: 2px solid #e9ecef;
        z-index: 10;
    }

    .day-hour-header.today {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    }

    .day-hour-grid {
        position: relative;
        min-height: 1440px;
    }

    .day-hour-cell {
        height: 60px;
        border-bottom: 1px solid #e9ecef;
        position: relative;
    }

    .day-hour-cell:hover {
        background: #f8f9fa;
    }
</style>

<div class="calendar-header">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
        <h1 class="calendar-title">📅 Calendar</h1>
        <RadzenButton Icon="add" Text="Create Event" Click="@(() => OpenEventDialogAsync(null, DateTime.Today))" class="create-event-btn" />
    </RadzenStack>
</div>

<div class="calendar-controls">
    <RadzenRow Gap="1rem" AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="3">
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                <RadzenButton Icon="chevron_left" ButtonStyle="ButtonStyle.Light" Click="NavigatePrevious" Size="ButtonSize.Medium" class="calendar-nav-btn" />
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" Click="GoToToday" class="calendar-nav-btn">Today</RadzenButton>
                <RadzenButton Icon="chevron_right" ButtonStyle="ButtonStyle.Light" Click="NavigateNext" Size="ButtonSize.Medium" class="calendar-nav-btn" />
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="3">
            <div class="calendar-view-title">@GetCurrentViewTitle()</div>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="3">
            <RadzenDropDown @bind-Value="_currentView" Data="@_availableViews" Change="@OnViewChanged" Style="width: 100%; border-radius: 10px;" TextProperty="Text" ValueProperty="Value" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="3">
            <RadzenButton Icon="date_range" ButtonStyle="ButtonStyle.Light" Click="OpenCustomRangeDialog" Size="ButtonSize.Medium" Text="Custom Range" class="calendar-nav-btn" Style="width: 100%;" />
        </RadzenColumn>
    </RadzenRow>
</div>

<div class="calendar-main" @oncontextmenu:preventDefault>
    @if (_loading)
    {
        <div class="loading-container">
            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
        </div>
    }
    else
    {
        @RenderCurrentView()
    }
</div>

<div class="events-sidebar rz-mt-4" @oncontextmenu:preventDefault>
    <div class="events-sidebar-title">📌 Events on @_selectedDate.ToString("MMMM dd, yyyy")</div>
    @if (GetEventsForDay(_selectedDate).Any())
    {
        <RadzenStack Gap="0.75rem">
            @foreach (var evt in GetEventsForDay(_selectedDate))
            {
                <div style="cursor: pointer;" @oncontextmenu="@(args => ShowEventContextMenu(args, evt))" @oncontextmenu:preventDefault @oncontextmenu:stopPropagation @onclick="@(() => OpenEventDialogAsync(evt.RecurrenceParentId ?? evt.Id))">
                    <RadzenCard Style="@($"border-left: 4px solid {GetEventBackgroundColor(evt)};")" class="event-detail-card">
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.Start">
                            <div style="@($"width: 48px; height: 48px; border-radius: 12px; background: {GetEventBackgroundColor(evt)}15; display: flex; align-items: center; justify-content: center;")">
                                <RadzenIcon Icon="event" Style="@($"color: {GetEventBackgroundColor(evt)}; font-size: 1.5rem;")" />
                            </div>
                            <RadzenStack Gap="0.25rem" Style="flex: 1;">
                                <RadzenText TextStyle="TextStyle.Body1" Style="font-weight: 700; color: #2d3748;">@evt.Title</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2" Style="color: #718096;">
                                    🕐 @evt.StartTime.ToString("hh:mm tt") - @evt.EndTime.ToString("hh:mm tt")
                                </RadzenText>
                                @if (!string.IsNullOrEmpty(evt.Location))
                                {
                                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem" AlignItems="AlignItems.Center">
                                        <RadzenText TextStyle="TextStyle.Body2" Style="color: #718096;">📍 @evt.Location</RadzenText>
                                    </RadzenStack>
                                }
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenCard>
                </div>
            }
        </RadzenStack>
    }
    else
    {
        <div class="no-events-message">No events scheduled for this date</div>
    }
</div>

@code {
    private DateTime _selectedDate = DateTime.Today;
    private List<Event> _events = new();
    private bool _loading = true;
    private Event? _contextMenuEvent;
    private DateTime? _contextMenuDate;
    private string _currentView = "Month";
    private List<CustomCalendarRange> _customRanges = new();
    private CustomCalendarRange? _selectedCustomRange;

    private class ViewOption
    {
        public string Value { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
    }

    private List<ViewOption> _availableViews = new();
    private string _userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                _userId = appUser.Id;
            }
        }
        await LoadCustomRanges();
        LoadAvailableViews();
        await LoadEvents();
    }

    private async Task LoadCustomRanges()
    {
        _customRanges = await CustomRangeRepository.GetAllAsync(_userId);
    }

    private async Task LoadEvents()
    {
        _loading = true;
        StateHasChanged();
        var startOfMonth = new DateTime(_selectedDate.Year, _selectedDate.Month, 1);
        var endOfMonth = startOfMonth.AddMonths(1).AddDays(-1);
        _events = await EventRepository.GetEventsByDateRangeAsync(
            startOfMonth.AddDays(-7),
            endOfMonth.AddDays(7),
            _userId);
        _loading = false;
        StateHasChanged();
    }

    private async Task OnDateChanged()
    {
        await LoadEvents();
    }

    private void LoadAvailableViews()
    {
        _availableViews = new List<ViewOption>
        {
            new ViewOption { Value = "Grid", Text = "Grid" },
            new ViewOption { Value = "Day", Text = "Day" },
            new ViewOption { Value = "WorkWeek", Text = "Work Week" },
            new ViewOption { Value = "Week", Text = "Week" },
            new ViewOption { Value = "Month", Text = "Month" }
        };

        // Add custom ranges
        foreach (var range in _customRanges)
        {
            _availableViews.Add(new ViewOption
            {
                Value = $"Custom_{range.Id}",
                Text = range.Name
            });
        }
    }

    private async Task OnViewChanged()
    {
        if (_currentView.StartsWith("Custom_"))
        {
            var rangeId = Guid.Parse(_currentView.Replace("Custom_", ""));
            _selectedCustomRange = _customRanges.FirstOrDefault(r => r.Id == rangeId);
        }
        else
        {
            _selectedCustomRange = null;
        }
        await LoadEvents();
        StateHasChanged();
    }

    private async Task NavigatePrevious()
    {
        _selectedDate = _currentView switch
        {
            "Day" => _selectedDate.AddDays(-1),
            "WorkWeek" => _selectedDate.AddDays(-7),
            "Week" => _selectedDate.AddDays(-7),
            "Month" => _selectedDate.AddMonths(-1),
            _ when _selectedCustomRange != null => _selectedDate.AddDays(-_selectedCustomRange.DaysCount),
            _ => _selectedDate.AddMonths(-1)
        };
        await LoadEvents();
    }

    private async Task NavigateNext()
    {
        _selectedDate = _currentView switch
        {
            "Day" => _selectedDate.AddDays(1),
            "WorkWeek" => _selectedDate.AddDays(7),
            "Week" => _selectedDate.AddDays(7),
            "Month" => _selectedDate.AddMonths(1),
            _ when _selectedCustomRange != null => _selectedDate.AddDays(_selectedCustomRange.DaysCount),
            _ => _selectedDate.AddMonths(1)
        };
        await LoadEvents();
    }

    private async Task GoToToday()
    {
        _selectedDate = DateTime.Today;
        await LoadEvents();
    }

    private string GetCurrentViewTitle()
    {
        return _currentView switch
        {
            "Grid" => "All Events",
            "Day" => _selectedDate.ToString("MMMM dd, yyyy"),
            "WorkWeek" or "Week" => $"{GetWeekStart().ToString("MMM dd")} - {GetWeekEnd().ToString("MMM dd, yyyy")}",
            "Month" => _selectedDate.ToString("MMMM yyyy"),
            _ when _selectedCustomRange != null => $"{GetCustomRangeStart().ToString("MMM dd")} - {GetCustomRangeEnd().ToString("MMM dd, yyyy")}",
            _ => _selectedDate.ToString("MMMM yyyy")
        };
    }

    private async Task OpenCustomRangeDialog()
    {
        var result = await DialogService.OpenAsync<CustomRangeDialog>(
            "Create Custom Calendar Range",
            null,
            new DialogOptions
            {
                Width = "500px",
                Height = "auto",
                Resizable = false,
                Draggable = true
            });

        if (result is CustomCalendarRange newRange)
        {
            // Save to database
            var savedRange = await CustomRangeRepository.CreateAsync(newRange);
            _customRanges.Add(savedRange);
            LoadAvailableViews();
            _currentView = $"Custom_{savedRange.Id}";
            _selectedCustomRange = savedRange;
            await LoadEvents();
            StateHasChanged();
        }
    }

    private List<List<DateTime>> GetCalendarWeeks()
    {
        var firstDayOfMonth = new DateTime(_selectedDate.Year, _selectedDate.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
        
        var startDate = firstDayOfMonth.AddDays(-(int)firstDayOfMonth.DayOfWeek);
        var endDate = lastDayOfMonth.AddDays(6 - (int)lastDayOfMonth.DayOfWeek);
        
        var weeks = new List<List<DateTime>>();
        var currentWeek = new List<DateTime>();
        
        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            currentWeek.Add(date);
            if (currentWeek.Count == 7)
            {
                weeks.Add(currentWeek);
                currentWeek = new List<DateTime>();
            }
        }
        
        return weeks;
    }

    private List<Event> GetEventsForDay(DateTime date)
    {
        return _events
            .Where(e => e.StartTime.Date == date.Date)
            .OrderBy(e => e.StartTime)
            .ToList();
    }

    private DateTime GetWeekStart()
    {
        var diff = _selectedDate.DayOfWeek - DayOfWeek.Sunday;
        return _selectedDate.AddDays(-diff).Date;
    }

    private DateTime GetWeekEnd()
    {
        return GetWeekStart().AddDays(6);
    }

    private DateTime GetWorkWeekStart()
    {
        var diff = _selectedDate.DayOfWeek - DayOfWeek.Monday;
        if (diff < 0) diff += 7;
        return _selectedDate.AddDays(-diff).Date;
    }

    private DateTime GetWorkWeekEnd()
    {
        return GetWorkWeekStart().AddDays(4); // Monday to Friday
    }

    private DateTime GetCustomRangeStart()
    {
        return _selectedDate.Date;
    }

    private DateTime GetCustomRangeEnd()
    {
        if (_selectedCustomRange == null) return _selectedDate;
        return _selectedDate.AddDays(_selectedCustomRange.DaysCount - 1);
    }

    private List<DateTime> GetDaysForCurrentView()
    {
        return _currentView switch
        {
            "Day" => new List<DateTime> { _selectedDate.Date },
            "WorkWeek" => GetWorkWeekDays(),
            "Week" => GetWeekDays(),
            "Month" => GetMonthDays(),
            _ when _selectedCustomRange != null => GetCustomRangeDays(),
            _ => GetMonthDays()
        };
    }

    private List<DateTime> GetWorkWeekDays()
    {
        var days = new List<DateTime>();
        var start = GetWorkWeekStart();
        for (int i = 0; i < 5; i++)
        {
            days.Add(start.AddDays(i));
        }
        return days;
    }

    private List<DateTime> GetWeekDays()
    {
        var days = new List<DateTime>();
        var start = GetWeekStart();
        for (int i = 0; i < 7; i++)
        {
            days.Add(start.AddDays(i));
        }
        return days;
    }

    private List<DateTime> GetMonthDays()
    {
        var days = new List<DateTime>();
        foreach (var week in GetCalendarWeeks())
        {
            days.AddRange(week);
        }
        return days;
    }

    private List<DateTime> GetCustomRangeDays()
    {
        if (_selectedCustomRange == null) return new List<DateTime>();

        var days = new List<DateTime>();
        var start = GetCustomRangeStart();

        for (int i = 0; i < _selectedCustomRange.DaysCount; i++)
        {
            var day = start.AddDays(i);
            if (_selectedCustomRange.ShowWeekends || (day.DayOfWeek != DayOfWeek.Saturday && day.DayOfWeek != DayOfWeek.Sunday))
            {
                days.Add(day);
            }
        }
        return days;
    }

    private RenderFragment RenderCurrentView() => builder =>
    {
        if (_currentView == "Grid")
        {
            RenderGridView(builder);
        }
        else if (_currentView == "Month")
        {
            RenderMonthView(builder);
        }
        else if (_currentView == "Day")
        {
            RenderDayViewWithHours(builder);
        }
        else if (_currentView == "WorkWeek")
        {
            RenderWorkWeekViewWithHours(builder);
        }
        else if (_currentView == "Week")
        {
            RenderWeekViewWithHours(builder);
        }
        else if (_currentView.StartsWith("Custom_") && _selectedCustomRange != null)
        {
            // Auto-select view based on custom range duration
            if (_selectedCustomRange.DaysCount <= 7)
            {
                // Use multi-day hourly view for shorter ranges
                var customDays = GetCustomRangeDays();
                RenderMultiDayHourView(builder, customDays);
            }
            else
            {
                // Use grid view for longer ranges
                RenderGridView(builder);
            }
        }
        else
        {
            RenderLinearView(builder);
        }
    };

    private void RenderGridView(RenderTreeBuilder builder)
    {
        builder.OpenComponent<EventsGrid>(0);
        builder.AddAttribute(1, "Events", _events);
        builder.AddAttribute(2, "IsLoading", _loading);
        builder.AddAttribute(3, "OnSearch", EventCallback.Factory.Create<string>(this, SearchEventsFromGrid));
        builder.AddAttribute(4, "OnEditEvent", EventCallback.Factory.Create<Guid>(this, EditEventFromGrid));
        builder.AddAttribute(5, "OnDeleteEvent", EventCallback.Factory.Create<Guid>(this, DeleteEventAsync));
        builder.AddAttribute(6, "OnCreateEvent", EventCallback.Factory.Create(this, CreateEventFromGrid));
        builder.CloseComponent();
    }

    private async Task SearchEventsFromGrid(string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadEvents();
        }
        else
        {
            _loading = true;
            _events = await EventRepository.SearchAsync(searchTerm, _userId);
            _loading = false;
        }
    }

    private async Task EditEventFromGrid(Guid eventId)
    {
        await OpenEventDialogAsync(eventId);
    }

    private async Task CreateEventFromGrid()
    {
        await OpenEventDialogAsync(null, DateTime.Today);
    }

    private void RenderMonthView(RenderTreeBuilder builder)
    {
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "style", "overflow-x: auto;");

        builder.OpenElement(2, "table");
        builder.AddAttribute(3, "class", "calendar-table");

        // Header
        builder.OpenElement(4, "thead");
        builder.OpenElement(5, "tr");

        string[] dayNames = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
        foreach (var dayName in dayNames)
        {
            builder.OpenElement(6, "th");
            builder.AddAttribute(7, "class", "calendar-header-cell");
            builder.AddContent(8, dayName);
            builder.CloseElement();
        }

        builder.CloseElement(); // tr
        builder.CloseElement(); // thead

        // Body
        builder.OpenElement(9, "tbody");

        foreach (var week in GetCalendarWeeks())
        {
            builder.OpenElement(10, "tr");

            foreach (var day in week)
            {
                RenderDayCell(builder, day, "120px");
            }

            builder.CloseElement(); // tr
        }

        builder.CloseElement(); // tbody
        builder.CloseElement(); // table
        builder.CloseElement(); // div
    }

    private void RenderDayViewWithHours(RenderTreeBuilder builder)
    {
        var eventsForDay = GetEventsForDay(_selectedDate);

        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "day-view-container");
        builder.AddAttribute(2, "style", "max-height: 800px; overflow-y: auto;");

        // Time column
        builder.OpenElement(3, "div");
        builder.AddAttribute(4, "class", "time-column");

        for (int hour = 0; hour < 24; hour++)
        {
            builder.OpenElement(5, "div");
            builder.AddAttribute(6, "class", "time-slot");

            var timeString = hour == 0 ? "12 AM" :
                           hour < 12 ? $"{hour} AM" :
                           hour == 12 ? "12 PM" :
                           $"{hour - 12} PM";

            builder.AddContent(7, timeString);
            builder.CloseElement();
        }

        builder.CloseElement(); // time-column

        // Day column
        builder.OpenElement(8, "div");
        builder.AddAttribute(9, "class", "day-column");

        // Hour rows (background grid)
        for (int hour = 0; hour < 24; hour++)
        {
            builder.OpenElement(10, "div");
            builder.AddAttribute(11, "class", "hour-row");
            builder.AddAttribute(12, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this,
                args => OpenEventDialogAsync(null, _selectedDate.Date.AddHours(hour))));
            builder.CloseElement();
        }

        // Render events positioned absolutely
        foreach (var evt in eventsForDay)
        {
            var startHour = evt.StartTime.Hour;
            var startMinute = evt.StartTime.Minute;
            var endHour = evt.EndTime.Hour;
            var endMinute = evt.EndTime.Minute;

            // Calculate top position (in pixels from top)
            var topPosition = (startHour * 60) + startMinute;

            // Calculate height based on duration
            var durationMinutes = (evt.EndTime - evt.StartTime).TotalMinutes;
            var height = Math.Max(30, durationMinutes); // Minimum height of 30px

            builder.OpenElement(13, "div");
            builder.AddAttribute(14, "class", "timed-event");
            builder.AddAttribute(15, "style", $"top: {topPosition}px; height: {height}px; background-color: {GetEventBackgroundColor(evt)};");
            builder.AddAttribute(16, "onclick", EventCallback.Factory.Create(this, () => OpenEventDialogAsync(evt.RecurrenceParentId ?? evt.Id)));
            builder.AddAttribute(17, "oncontextmenu", EventCallback.Factory.Create<MouseEventArgs>(this, args => ShowEventContextMenu(args, evt)));
            builder.AddAttribute(18, "oncontextmenu:preventDefault", true);
            builder.AddAttribute(19, "oncontextmenu:stopPropagation", true);

            // Event content
            builder.OpenElement(20, "div");
            builder.AddAttribute(21, "class", "timed-event-title");
            builder.AddContent(22, evt.Title);
            builder.CloseElement();

            builder.OpenElement(23, "div");
            builder.AddAttribute(24, "class", "timed-event-time");
            builder.AddContent(25, $"{evt.StartTime:h:mm tt} - {evt.EndTime:h:mm tt}");
            builder.CloseElement();

            builder.CloseElement(); // timed-event
        }

        // Current time indicator (red line) if viewing today
        if (_selectedDate.Date == DateTime.Today)
        {
            var now = DateTime.Now;
            var currentPosition = (now.Hour * 60) + now.Minute;

            builder.OpenElement(26, "div");
            builder.AddAttribute(27, "class", "current-time-indicator");
            builder.AddAttribute(28, "style", $"top: {currentPosition}px;");
            builder.CloseElement();
        }

        builder.CloseElement(); // day-column
        builder.CloseElement(); // day-view-container
    }

    private void RenderWorkWeekViewWithHours(RenderTreeBuilder builder)
    {
        var workWeekDays = GetWorkWeekDays();
        RenderMultiDayHourView(builder, workWeekDays);
    }

    private void RenderWeekViewWithHours(RenderTreeBuilder builder)
    {
        var weekDays = GetWeekDays();
        RenderMultiDayHourView(builder, weekDays);
    }

    private void RenderMultiDayHourView(RenderTreeBuilder builder, List<DateTime> days)
    {
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "multi-day-hour-view");
        builder.AddAttribute(2, "style", "max-height: 800px; overflow-y: auto;");

        // Time column (shared)
        builder.OpenElement(3, "div");
        builder.AddAttribute(4, "class", "time-column");

        // Empty header cell for time column
        builder.OpenElement(5, "div");
        builder.AddAttribute(6, "style", "height: 41px; border-bottom: 2px solid #e9ecef;");
        builder.CloseElement();

        for (int hour = 0; hour < 24; hour++)
        {
            builder.OpenElement(7, "div");
            builder.AddAttribute(8, "class", "time-slot");

            var timeString = hour == 0 ? "12 AM" :
                           hour < 12 ? $"{hour} AM" :
                           hour == 12 ? "12 PM" :
                           $"{hour - 12} PM";

            builder.AddContent(9, timeString);
            builder.CloseElement();
        }

        builder.CloseElement(); // time-column

        // Day columns container
        builder.OpenElement(10, "div");
        builder.AddAttribute(11, "class", "multi-day-columns");

        foreach (var day in days)
        {
            var eventsForDay = GetEventsForDay(day);
            var isToday = day.Date == DateTime.Today;

            builder.OpenElement(12, "div");
            builder.AddAttribute(13, "class", "day-hour-column");

            // Day header
            builder.OpenElement(14, "div");
            builder.AddAttribute(15, "class", "day-hour-header" + (isToday ? " today" : ""));
            builder.OpenElement(16, "div");
            builder.AddContent(17, day.ToString("ddd"));
            builder.CloseElement();
            builder.OpenElement(18, "div");
            builder.AddAttribute(19, "style", "font-size: 0.8rem; font-weight: 600;");
            builder.AddContent(20, day.ToString("MMM dd"));
            builder.CloseElement();
            builder.CloseElement();

            // Day grid with hours
            builder.OpenElement(21, "div");
            builder.AddAttribute(22, "class", "day-hour-grid");

            // Hour cells (background grid)
            for (int hour = 0; hour < 24; hour++)
            {
                builder.OpenElement(23, "div");
                builder.AddAttribute(24, "class", "day-hour-cell");
                builder.AddAttribute(25, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this,
                    args => OpenEventDialogAsync(null, day.Date.AddHours(hour))));
                builder.CloseElement();
            }

            // Render events positioned absolutely
            foreach (var evt in eventsForDay)
            {
                var startHour = evt.StartTime.Hour;
                var startMinute = evt.StartTime.Minute;
                var topPosition = (startHour * 60) + startMinute;
                var durationMinutes = (evt.EndTime - evt.StartTime).TotalMinutes;
                var height = Math.Max(30, durationMinutes);

                builder.OpenElement(26, "div");
                builder.AddAttribute(27, "class", "timed-event");
                builder.AddAttribute(28, "style", $"top: {topPosition}px; height: {height}px; background-color: {GetEventBackgroundColor(evt)}; left: 2px; right: 2px;");
                builder.AddAttribute(29, "onclick", EventCallback.Factory.Create(this, () => OpenEventDialogAsync(evt.RecurrenceParentId ?? evt.Id)));
                builder.AddAttribute(30, "oncontextmenu", EventCallback.Factory.Create<MouseEventArgs>(this, args => ShowEventContextMenu(args, evt)));
                builder.AddAttribute(31, "oncontextmenu:preventDefault", true);
                builder.AddAttribute(32, "oncontextmenu:stopPropagation", true);

                // Event content
                builder.OpenElement(33, "div");
                builder.AddAttribute(34, "class", "timed-event-title");
                builder.AddAttribute(35, "style", "font-size: 0.75rem;");
                builder.AddContent(36, evt.Title.Length > 15 ? evt.Title.Substring(0, 12) + "..." : evt.Title);
                builder.CloseElement();

                if (height > 40)
                {
                    builder.OpenElement(37, "div");
                    builder.AddAttribute(38, "class", "timed-event-time");
                    builder.AddAttribute(39, "style", "font-size: 0.65rem;");
                    builder.AddContent(40, $"{evt.StartTime:h:mm tt}");
                    builder.CloseElement();
                }

                builder.CloseElement(); // timed-event
            }

            // Current time indicator for today
            if (isToday)
            {
                var now = DateTime.Now;
                var currentPosition = (now.Hour * 60) + now.Minute;

                builder.OpenElement(41, "div");
                builder.AddAttribute(42, "class", "current-time-indicator");
                builder.AddAttribute(43, "style", $"top: {currentPosition}px;");
                builder.CloseElement();
            }

            builder.CloseElement(); // day-hour-grid
            builder.CloseElement(); // day-hour-column
        }

        builder.CloseElement(); // multi-day-columns
        builder.CloseElement(); // multi-day-hour-view
    }

    private void RenderLinearView(RenderTreeBuilder builder)
    {
        var days = GetDaysForCurrentView();

        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "style", "overflow-x: auto;");

        builder.OpenElement(2, "table");
        builder.AddAttribute(3, "class", "calendar-table");

        // Header
        builder.OpenElement(4, "thead");
        builder.OpenElement(5, "tr");

        foreach (var day in days)
        {
            builder.OpenElement(6, "th");
            builder.AddAttribute(7, "class", "calendar-header-cell");
            builder.AddAttribute(8, "style", "min-width: 150px;");
            builder.OpenComponent<RadzenText>(9);
            builder.AddAttribute(10, "TextStyle", TextStyle.Body1);
            builder.AddAttribute(11, "ChildContent", (RenderFragment)(b =>
            {
                b.AddContent(0, day.ToString("ddd"));
                b.OpenElement(1, "br");
                b.CloseElement();
                b.AddContent(2, day.ToString("MMM dd"));
            }));
            builder.CloseComponent();
            builder.CloseElement();
        }

        builder.CloseElement(); // tr
        builder.CloseElement(); // thead

        // Body
        builder.OpenElement(12, "tbody");
        builder.OpenElement(13, "tr");

        foreach (var day in days)
        {
            RenderDayCell(builder, day, "150px");
        }

        builder.CloseElement(); // tr
        builder.CloseElement(); // tbody
        builder.CloseElement(); // table
        builder.CloseElement(); // div
    }

    private void RenderDayCell(RenderTreeBuilder builder, DateTime day, string minWidth)
    {
        var isToday = day.Date == DateTime.Today;
        var isOtherMonth = _currentView == "Month" && day.Month != _selectedDate.Month;
        var cellClass = "calendar-day-cell" + (isToday ? " today" : "") + (isOtherMonth ? " other-month" : "");
        var dayCellContextDate = day; // Capture for lambda

        builder.OpenElement(0, "td");
        builder.AddAttribute(1, "class", cellClass);
        builder.AddAttribute(2, "style", $"min-width: {minWidth};");

        // Day number (with context menu for adding events)
        builder.OpenElement(3, "div");
        builder.AddAttribute(4, "class", "calendar-day-number" + (isToday ? " today" : ""));
        builder.AddAttribute(5, "oncontextmenu", EventCallback.Factory.Create<MouseEventArgs>(this, args => ShowAddEventContextMenu(args, dayCellContextDate)));
        builder.AddAttribute(6, "oncontextmenu:preventDefault", true);
        builder.AddAttribute(7, "style", "cursor: context-menu;");
        builder.AddContent(8, day.Day);
        builder.CloseElement();

        // Events
        var events = GetEventsForDay(day);
        foreach (var evt in events)
        {
            builder.OpenElement(9, "div");
            builder.AddAttribute(10, "class", "event-container");
            builder.AddAttribute(11, "oncontextmenu", EventCallback.Factory.Create<MouseEventArgs>(this, args => ShowEventContextMenu(args, evt)));
            builder.AddAttribute(12, "oncontextmenu:preventDefault", true);
            builder.AddAttribute(13, "onclick", EventCallback.Factory.Create(this, () => OpenEventDialogAsync(evt.RecurrenceParentId ?? evt.Id)));

            builder.OpenElement(14, "div");
            builder.AddAttribute(15, "class", "event-badge");
            builder.AddAttribute(16, "style", $"background-color: {GetEventBackgroundColor(evt)}; color: white;");
            builder.AddAttribute(17, "title", evt.Title); // Full title on hover
            builder.AddContent(18, evt.Title.Substring(0, Math.Min(15, evt.Title.Length)) + (evt.Title.Length > 15 ? "..." : ""));
            builder.CloseElement();

            builder.CloseElement(); // div
        }

        builder.CloseElement(); // td
    }

    private string GetEventBackgroundColor(Event evt)
    {
        // If the event has a custom color, use it
        if (!string.IsNullOrEmpty(evt.Color))
        {
            return evt.Color;
        }

        // Otherwise, use color based on event type
        return evt.EventType switch
        {
            Core.Enums.EventType.Meeting => "#1E88E5",      // Blue
            Core.Enums.EventType.Appointment => "#43A047",  // Green
            Core.Enums.EventType.Task => "#FB8C00",         // Orange
            Core.Enums.EventType.TimeBlock => "#8E24AA",    // Purple
            Core.Enums.EventType.Reminder => "#FDD835",     // Yellow
            Core.Enums.EventType.Deadline => "#E53935",     // Red
            _ => "#757575"                                   // Gray
        };
    }

    private void ShowEventContextMenu(MouseEventArgs args, Event evt)
    {
        _contextMenuEvent = evt;

        // Check if this is a recurring event instance or parent
        var isRecurringInstance = evt.RecurrenceParentId.HasValue;
        var isRecurringParent = evt.IsRecurring && !evt.RecurrenceParentId.HasValue;

        var menuItems = new List<ContextMenuItem>();

        if (isRecurringInstance || isRecurringParent)
        {
            // Options for recurring event instance or parent
            menuItems.Add(new ContextMenuItem { Text = "Edit This Occurrence", Icon = "edit", Value = "edit-single" });
            menuItems.Add(new ContextMenuItem { Text = "Edit All Occurrences", Icon = "edit_note", Value = "edit-all" });
            menuItems.Add(new ContextMenuItem { Text = "Delete This Occurrence", Icon = "delete", Value = "delete-single" });
            menuItems.Add(new ContextMenuItem { Text = "Delete All Occurrences", Icon = "delete_forever", Value = "delete-all" });
        }
        else
        {
            // Options for regular event
            menuItems.Add(new ContextMenuItem { Text = "Edit", Icon = "edit", Value = "edit" });
            menuItems.Add(new ContextMenuItem { Text = "Delete", Icon = "delete", Value = "delete" });
        }

        ContextMenuService.Open(args, menuItems, OnEventContextMenuClick);
    }

    private void ShowAddEventContextMenu(MouseEventArgs args, DateTime date)
    {
        _contextMenuDate = date;
        ContextMenuService.Open(args, new List<ContextMenuItem>
        {
            new ContextMenuItem { Text = "Add Event", Icon = "add", Value = "add" }
        }, OnAddEventContextMenuClick);
    }

    private void OnEventContextMenuClick(MenuItemEventArgs args)
    {
        if (_contextMenuEvent == null) return;

        var action = args.Value?.ToString();
        switch (action)
        {
            case "edit":
                _ = OpenEventDialogAsync(_contextMenuEvent.Id);
                break;
            case "edit-single":
                _ = EditSingleOccurrenceAsync(_contextMenuEvent);
                break;
            case "edit-all":
                _ = OpenEventDialogAsync(_contextMenuEvent.RecurrenceParentId ?? _contextMenuEvent.Id);
                break;
            case "delete":
                _ = DeleteEventAsync(_contextMenuEvent.Id);
                break;
            case "delete-single":
                _ = DeleteSingleOccurrenceAsync(_contextMenuEvent);
                break;
            case "delete-all":
                _ = DeleteEventAsync(_contextMenuEvent.RecurrenceParentId ?? _contextMenuEvent.Id);
                break;
        }
        ContextMenuService.Close();
        _contextMenuEvent = null;
    }

    private void OnAddEventContextMenuClick(MenuItemEventArgs args)
    {
        if (_contextMenuDate.HasValue)
        {
            _ = OpenEventDialogAsync(null, _contextMenuDate.Value);
        }
        ContextMenuService.Close();
        _contextMenuDate = null;
    }

    private async Task OpenEventDialogAsync(Guid? eventId, DateTime? prefilledDate = null)
    {
        var parameters = new Dictionary<string, object>();

        if (eventId.HasValue)
        {
            parameters.Add("EventId", eventId.Value);
        }

        if (prefilledDate.HasValue)
        {
            parameters.Add("PrefilledDate", prefilledDate.Value);
        }

        var result = await DialogService.OpenAsync<EventFormDialog>(
            eventId.HasValue ? "Edit Event" : "Create Event",
            parameters,
            new DialogOptions
            {
                Width = "600px",
                Height = "auto",
                Resizable = true,
                Draggable = true
            });

        // If the dialog was saved (result == true), reload events
        if (result is bool saved && saved)
        {
            await LoadEvents();
        }
    }

    private async Task EditSingleOccurrenceAsync(Event instance)
    {
        if (!instance.RecurrenceParentId.HasValue) return;

        // Open dialog with the instance data and EditSingleOccurrence flag
        var parameters = new Dictionary<string, object>
        {
            { "EditSingleOccurrence", true },
            { "InstanceEvent", instance }
        };

        var result = await DialogService.OpenAsync<EventFormDialog>(
            "Edit This Occurrence",
            parameters,
            new DialogOptions
            {
                Width = "600px",
                Height = "auto",
                Resizable = true,
                Draggable = true
            });

        // If the dialog was saved, reload events
        if (result is bool saved && saved)
        {
            await LoadEvents();
        }
    }

    private async Task DeleteSingleOccurrenceAsync(Event instance)
    {
        if (!instance.RecurrenceParentId.HasValue) return;

        var result = await DialogService.Confirm(
            "Are you sure you want to delete this occurrence?",
            "Delete Occurrence",
            new ConfirmOptions() { OkButtonText = "Delete", CancelButtonText = "Cancel" });

        if (result == true)
        {
            // Create a "tombstone" exception to mark this date as deleted
            var exceptionEvent = new Event
            {
                Id = Guid.NewGuid(),
                Title = "(Deleted)",
                StartTime = instance.StartTime,
                EndTime = instance.EndTime,
                UserId = _userId,
                IsRecurring = false,
                IsRecurrenceException = true,
                RecurrenceExceptionDate = instance.StartTime.Date,
                RecurrenceParentId = instance.RecurrenceParentId.Value,
                CreatedAt = DateTime.UtcNow,
                Tags = new List<string>(),
                Attendees = new List<Attendee>()
            };

            await EventRepository.CreateAsync(exceptionEvent);
            await LoadEvents();
        }
    }

    private async Task DeleteEventAsync(Guid id)
    {
        var result = await DialogService.Confirm(
            "Are you sure you want to delete this event?",
            "Delete Event",
            new ConfirmOptions() { OkButtonText = "Delete", CancelButtonText = "Cancel" });

        if (result == true)
        {
            await EventRepository.DeleteAsync(id, _userId);
            await LoadEvents();
        }
    }
}
