@page "/analytics"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Tempus.Core.Interfaces
@using Tempus.Core.Models
@attribute [Authorize]
@inject IAnalyticsService AnalyticsService
@inject IAnalyticsReportService ReportService
@inject ITrendForecastService TrendForecastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime JSRuntime

<PageTitle>Analytics - Tempus</PageTitle>

<div style="padding: 2rem;">
    <RadzenStack Gap="2rem">
        <!-- Header -->
        <RadzenCard Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 16px; padding: 2rem; box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);">
            <RadzenStack Gap="0.5rem">
                <RadzenText TextStyle="TextStyle.H3" Style="font-weight: 700; margin: 0;">üìä Calendar Analytics & Insights</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Style="opacity: 0.9;">
                    Understand your time usage patterns and optimize your schedule.
                </RadzenText>
            </RadzenStack>
        </RadzenCard>

        <!-- Controls -->
        <RadzenCard>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="1.5rem" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.SpaceBetween">
                <!-- Analysis Period Menu -->
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                    <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-weight: 600;">Period:</RadzenText>
                    <RadzenSplitButton Text="@GetPeriodText()"
                                       Click="@(() => LoadAnalytics(_selectedDays))"
                                       ButtonStyle="ButtonStyle.Primary"
                                       Size="ButtonSize.Small"
                                       Icon="calendar_today">
                        <ChildContent>
                            <RadzenSplitButtonItem Text="Last 7 Days" Value="7" Click="@(() => LoadAnalytics(7))" />
                            <RadzenSplitButtonItem Text="Last 30 Days" Value="30" Click="@(() => LoadAnalytics(30))" />
                            <RadzenSplitButtonItem Text="Last 90 Days" Value="90" Click="@(() => LoadAnalytics(90))" />
                            <RadzenSplitButtonItem Text="Last Year" Value="365" Click="@(() => LoadAnalytics(365))" />
                        </ChildContent>
                    </RadzenSplitButton>
                </RadzenStack>

                <!-- Export Menu -->
                @if (_analytics != null && !_loading)
                {
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                        <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-weight: 600;">Export:</RadzenText>
                        <RadzenSplitButton Text="Download Report"
                                           Click="@DownloadPdfReport"
                                           ButtonStyle="ButtonStyle.Success"
                                           Size="ButtonSize.Small"
                                           Icon="download"
                                           Disabled="@(_downloadingPdf || _downloadingCsv || _downloadingExcel)">
                            <ChildContent>
                                <RadzenSplitButtonItem Text="PDF Report" Icon="picture_as_pdf" Click="@DownloadPdfReport" Disabled="@_downloadingPdf" />
                                <RadzenSplitButtonItem Text="CSV Data" Icon="table_view" Click="@DownloadCsvReport" Disabled="@_downloadingCsv" />
                                <RadzenSplitButtonItem Text="Excel Report" Icon="description" Click="@DownloadExcelReport" Disabled="@_downloadingExcel" />
                            </ChildContent>
                        </RadzenSplitButton>
                    </RadzenStack>
                }
            </RadzenStack>
        </RadzenCard>

        @if (_loading)
        {
            <RadzenCard Style="padding: 3rem; text-align: center;">
                <RadzenStack Gap="1rem" AlignItems="AlignItems.Center">
                    <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
                    <RadzenText Style="opacity: 0.7;">Analyzing your calendar...</RadzenText>
                </RadzenStack>
            </RadzenCard>
        }
        else if (_analytics != null)
        {
            <!-- Quick Stats -->
            <RadzenRow Gap="1rem">
                <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                    <RadzenCard Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 16px; padding: 2rem; box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);">
                        <RadzenStack Gap="0.5rem">
                            <RadzenText TextStyle="TextStyle.DisplayH3" Style="font-weight: 800; margin: 0;">@_analytics.TotalEvents</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Style="opacity: 0.9;">Total Events</RadzenText>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                    <RadzenCard Style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); color: white; border-radius: 16px; padding: 2rem; box-shadow: 0 10px 30px rgba(79, 172, 254, 0.3);">
                        <RadzenStack Gap="0.5rem">
                            <RadzenText TextStyle="TextStyle.DisplayH3" Style="font-weight: 800; margin: 0;">@_analytics.MeetingCount</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Style="opacity: 0.9;">Meetings</RadzenText>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                    <RadzenCard Style="background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%); color: white; border-radius: 16px; padding: 2rem; box-shadow: 0 10px 30px rgba(67, 233, 123, 0.3);">
                        <RadzenStack Gap="0.5rem">
                            <RadzenText TextStyle="TextStyle.DisplayH3" Style="font-weight: 800; margin: 0;">@_analytics.TotalHours</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Style="opacity: 0.9;">Scheduled Hours</RadzenText>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                    <RadzenCard Style="background: linear-gradient(135deg, #fa709a 0%, #fee140 100%); color: white; border-radius: 16px; padding: 2rem; box-shadow: 0 10px 30px rgba(250, 112, 154, 0.3);">
                        <RadzenStack Gap="0.5rem">
                            <RadzenText TextStyle="TextStyle.DisplayH3" Style="font-weight: 800; margin: 0;">$@_analytics.TotalMeetingCost.ToString("N0")</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Style="opacity: 0.9;">Meeting Costs</RadzenText>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenColumn>
            </RadzenRow>

            <!-- Calendar Health Score -->
            <RadzenCard>
                <RadzenStack Gap="1.5rem">
                    <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 700;">üè• Calendar Health Score</RadzenText>
                    <RadzenRow>
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenStack Gap="1rem" AlignItems="AlignItems.Center">
                                <div style="position: relative; width: 200px; height: 200px;">
                                    <svg viewBox="0 0 200 200" style="transform: rotate(-90deg);">
                                        <circle cx="100" cy="100" r="90" fill="none" stroke="#e0e0e0" stroke-width="20"/>
                                        <circle cx="100" cy="100" r="90" fill="none" stroke="@GetHealthScoreColor()" stroke-width="20"
                                                stroke-dasharray="@($"{(_analytics.Productivity.CalendarHealthScore / 100) * 565.48} 565.48")"
                                                stroke-linecap="round"/>
                                    </svg>
                                    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center;">
                                        <RadzenText TextStyle="TextStyle.DisplayH2" Style="font-weight: 800; margin: 0;">@((int)_analytics.Productivity.CalendarHealthScore)</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Caption">out of 100</RadzenText>
                                    </div>
                                </div>
                                <RadzenBadge Text="@GetHealthScoreLabel()" Style="@($"background: {GetHealthScoreColor()}; font-size: 1rem; padding: 0.5rem 1rem;")" />
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenStack Gap="1rem">
                                <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-weight: 600;">Score Breakdown:</RadzenText>
                                <RadzenStack Gap="0.5rem">
                                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                                        <RadzenIcon Icon="schedule" />
                                        <RadzenText>Scheduled Time: @_analytics.TimeUsage.ScheduledPercentage.ToString("F1")%</RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                                        <RadzenIcon Icon="psychology" />
                                        <RadzenText>Focus Blocks: @_analytics.Productivity.FocusTimeBlocks</RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                                        <RadzenIcon Icon="people" />
                                        <RadzenText>Back-to-Back Meetings: @_analytics.MeetingStats.BackToBackMeetings</RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenCard>

            <!-- Time Usage Breakdown -->
            <RadzenCard>
                <RadzenStack Gap="1.5rem">
                    <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 700;">‚è±Ô∏è Time Usage Breakdown</RadzenText>
                    <RadzenRow Gap="1rem">
                        @foreach (var eventType in _analytics.TimeUsage.EventTypeHours.OrderByDescending(kvp => kvp.Value))
                        {
                            <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
                                <RadzenCard Style="background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);">
                                    <RadzenStack Gap="0.5rem">
                                        <RadzenText TextStyle="TextStyle.H6" Style="font-weight: 600;">@eventType.Key</RadzenText>
                                        <RadzenText TextStyle="TextStyle.DisplayH4" Style="font-weight: 800; margin: 0;">@eventType.Value hrs</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Caption" Style="opacity: 0.7;">@_analytics.TimeUsage.EventTypeCounts[eventType.Key] events</RadzenText>
                                    </RadzenStack>
                                </RadzenCard>
                            </RadzenColumn>
                        }
                    </RadzenRow>
                </RadzenStack>
            </RadzenCard>

            <!-- Meeting Analytics -->
            <RadzenCard>
                <RadzenStack Gap="1.5rem">
                    <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 700;">üë• Meeting Analytics</RadzenText>
                    <RadzenRow Gap="1.5rem">
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenStack Gap="1rem">
                                <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-weight: 600;">Meeting Statistics</RadzenText>
                                <RadzenRow Gap="1rem">
                                    <RadzenColumn Size="6">
                                        <RadzenText Style="opacity: 0.7;">Total Meetings:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.H6" Style="font-weight: 700;">@_analytics.MeetingStats.TotalMeetings</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="6">
                                        <RadzenText Style="opacity: 0.7;">Total Hours:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.H6" Style="font-weight: 700;">@_analytics.MeetingStats.TotalMeetingHours</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="6">
                                        <RadzenText Style="opacity: 0.7;">Avg Duration:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.H6" Style="font-weight: 700;">@_analytics.MeetingStats.AverageMeetingDuration.ToString("F0") min</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="6">
                                        <RadzenText Style="opacity: 0.7;">Total Cost:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.H6" Style="font-weight: 700;">$@_analytics.MeetingStats.TotalMeetingCost.ToString("N0")</RadzenText>
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenStack Gap="1rem">
                                <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-weight: 600;">Top Meeting Participants</RadzenText>
                                @if (_analytics.MeetingStats.TopAttendees.Any())
                                {
                                    @foreach (var attendee in _analytics.MeetingStats.TopAttendees.Take(5))
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
                                            <RadzenStack Gap="0.25rem">
                                                <RadzenText Style="font-weight: 600;">@attendee.Name</RadzenText>
                                                <RadzenText TextStyle="TextStyle.Caption" Style="opacity: 0.7;">@attendee.Email</RadzenText>
                                            </RadzenStack>
                                            <RadzenBadge Text="@($"{attendee.MeetingCount} meetings")" Style="background: #667eea;" />
                                        </RadzenStack>
                                    }
                                }
                                else
                                {
                                    <RadzenText Style="opacity: 0.7; font-style: italic;">No attendee data available</RadzenText>
                                }
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenCard>

            <!-- Productivity Metrics -->
            <RadzenCard>
                <RadzenStack Gap="1.5rem">
                    <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 700;">üéØ Productivity Insights</RadzenText>
                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenCard Style="background: linear-gradient(135deg, rgba(67, 233, 123, 0.1) 0%, rgba(56, 249, 215, 0.1) 100%);">
                                <RadzenStack Gap="0.5rem">
                                    <RadzenText Style="opacity: 0.7;">Focus Time Blocks</RadzenText>
                                    <RadzenText TextStyle="TextStyle.DisplayH4" Style="font-weight: 800;">@_analytics.Productivity.FocusTimeBlocks</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption">@_analytics.Productivity.TotalFocusHours hours total</RadzenText>
                                </RadzenStack>
                            </RadzenCard>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenCard Style="background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);">
                                <RadzenStack Gap="0.5rem">
                                    <RadzenText Style="opacity: 0.7;">Task Completion Rate</RadzenText>
                                    <RadzenText TextStyle="TextStyle.DisplayH4" Style="font-weight: 800;">@_analytics.Productivity.TaskCompletionRate.ToString("F0")%</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption">@_analytics.Productivity.CompletedTasks of @(_analytics.Productivity.CompletedTasks + _analytics.Productivity.OverdueTasks) tasks</RadzenText>
                                </RadzenStack>
                            </RadzenCard>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenCard Style="background: linear-gradient(135deg, rgba(250, 112, 154, 0.1) 0%, rgba(254, 225, 64, 0.1) 100%);">
                                <RadzenStack Gap="0.5rem">
                                    <RadzenText Style="opacity: 0.7;">Fragmented Hours</RadzenText>
                                    <RadzenText TextStyle="TextStyle.DisplayH4" Style="font-weight: 800;">@_analytics.Productivity.FragmentedHours</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption">Hours with 3+ events</RadzenText>
                                </RadzenStack>
                            </RadzenCard>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenCard>

            <!-- Recommendations -->
            @if (_analytics.Productivity.Recommendations.Any())
            {
                <RadzenCard>
                    <RadzenStack Gap="1.5rem">
                        <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 700;">üí° Recommendations</RadzenText>
                        <RadzenStack Gap="1rem">
                            @foreach (var recommendation in _analytics.Productivity.Recommendations)
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
                                    @recommendation
                                </RadzenAlert>
                            }
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            }

            <!-- Warnings -->
            @if (_analytics.Productivity.Warnings.Any())
            {
                <RadzenCard>
                    <RadzenStack Gap="1.5rem">
                        <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 700;">‚ö†Ô∏è Warnings</RadzenText>
                        <RadzenStack Gap="1rem">
                            @foreach (var warning in _analytics.Productivity.Warnings)
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Variant="Variant.Flat" Shade="Shade.Lighter">
                                    @warning
                                </RadzenAlert>
                            }
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            }

            <!-- Trend Forecasting -->
            @if (_trendAnalysis != null)
            {
                <!-- Key Insights -->
                @if (_trendAnalysis.KeyInsights.Any() || _trendAnalysis.Warnings.Any())
                {
                    <RadzenCard Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 16px; padding: 2rem;">
                        <RadzenStack Gap="1rem">
                            <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 700;">üîÆ Predictive Insights</RadzenText>
                            <RadzenText Style="opacity: 0.9;">@_trendAnalysis.WorkloadPattern</RadzenText>

                            @foreach (var insight in _trendAnalysis.KeyInsights)
                            {
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Start">
                                    <RadzenIcon Icon="trending_up" />
                                    <RadzenText Style="opacity: 0.95;">@insight</RadzenText>
                                </RadzenStack>
                            }

                            @foreach (var warning in _trendAnalysis.Warnings)
                            {
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Start">
                                    <RadzenIcon Icon="warning" />
                                    <RadzenText Style="opacity: 0.95;">@warning</RadzenText>
                                </RadzenStack>
                            }
                        </RadzenStack>
                    </RadzenCard>
                }

                <!-- Historical Trends -->
                <RadzenCard>
                    <RadzenStack Gap="1.5rem">
                        <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 700;">üìà Historical Trends (@_trendAnalysis.HistoricalDays days)</RadzenText>
                        <RadzenRow Gap="1rem">
                            @foreach (var trend in _trendAnalysis.Trends)
                            {
                                <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
                                    <RadzenCard Style="background: rgba(102, 126, 234, 0.05);">
                                        <RadzenStack Gap="0.5rem">
                                            <RadzenText TextStyle="TextStyle.H6" Style="font-weight: 600;">@trend.MetricName</RadzenText>
                                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                                                <RadzenIcon Icon="@GetTrendIcon(trend.Direction)" Style="@GetTrendColor(trend.Direction)" />
                                                <RadzenText TextStyle="TextStyle.DisplayH5" Style="font-weight: 800;">@trend.ChangePercentage.ToString("F1")%</RadzenText>
                                            </RadzenStack>
                                            <RadzenText TextStyle="TextStyle.Caption" Style="opacity: 0.7;">@trend.Interpretation</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Caption" Style="opacity: 0.6;">Avg: @trend.Average.ToString("F1") | Range: @trend.Min.ToString("F1")-@trend.Max.ToString("F1")</RadzenText>
                                        </RadzenStack>
                                    </RadzenCard>
                                </RadzenColumn>
                            }
                        </RadzenRow>
                    </RadzenStack>
                </RadzenCard>

                <!-- Future Predictions -->
                <RadzenCard>
                    <RadzenStack Gap="1.5rem">
                        <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 700;">üîÆ Forecast (@_trendAnalysis.ForecastDays days)</RadzenText>
                        <RadzenRow Gap="1rem">
                            @foreach (var prediction in _trendAnalysis.Predictions)
                            {
                                <RadzenColumn Size="12" SizeMD="6">
                                    <RadzenCard Style="background: linear-gradient(135deg, rgba(67, 233, 123, 0.1) 0%, rgba(56, 249, 215, 0.1) 100%);">
                                        <RadzenStack Gap="0.75rem">
                                            <RadzenText TextStyle="TextStyle.H6" Style="font-weight: 600;">@prediction.MetricName</RadzenText>
                                            <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.Center">
                                                <div>
                                                    <RadzenText TextStyle="TextStyle.Caption" Style="opacity: 0.7;">Predicted Average</RadzenText>
                                                    <RadzenText TextStyle="TextStyle.DisplayH5" Style="font-weight: 800;">@prediction.PredictedValue.ToString("F1")</RadzenText>
                                                </div>
                                                <div>
                                                    <RadzenText TextStyle="TextStyle.Caption" Style="opacity: 0.7;">Confidence</RadzenText>
                                                    <RadzenText TextStyle="TextStyle.H6" Style="font-weight: 700;">@prediction.ConfidenceLevel.ToString("F0")%</RadzenText>
                                                </div>
                                            </RadzenStack>
                                            <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Style="margin-top: 0.5rem;">
                                                @prediction.Recommendation
                                            </RadzenAlert>
                                        </RadzenStack>
                                    </RadzenCard>
                                </RadzenColumn>
                            }
                        </RadzenRow>
                    </RadzenStack>
                </RadzenCard>

                <!-- Detected Patterns -->
                @if (_trendAnalysis.DetectedPatterns.Any())
                {
                    <RadzenCard>
                        <RadzenStack Gap="1.5rem">
                            <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 700;">üîç Detected Patterns</RadzenText>
                            <RadzenRow Gap="0.5rem">
                                @foreach (var pattern in _trendAnalysis.DetectedPatterns)
                                {
                                    <RadzenColumn Size="12" SizeMD="6">
                                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Start">
                                            <RadzenIcon Icon="insights" Style="color: #667eea;" />
                                            <RadzenText>@pattern</RadzenText>
                                        </RadzenStack>
                                    </RadzenColumn>
                                }
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenCard>
                }

                <!-- Workload Forecast -->
                @if (_workloadForecasts.Any())
                {
                    <RadzenCard>
                        <RadzenStack Gap="1.5rem">
                            <RadzenText TextStyle="TextStyle.H5" Style="font-weight: 700;">üìÖ Workload Forecast (Next 4 Weeks)</RadzenText>
                            <RadzenRow Gap="1rem">
                                @foreach (var forecast in _workloadForecasts)
                                {
                                    <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                                        <RadzenCard Style="@GetWorkloadCardStyle(forecast.WorkloadLevel)">
                                            <RadzenStack Gap="0.5rem">
                                                <RadzenText TextStyle="TextStyle.Subtitle2" Style="font-weight: 600;">@forecast.Description</RadzenText>
                                                <RadzenText TextStyle="TextStyle.Caption">@forecast.StartDate.ToString("MMM dd") - @forecast.EndDate.ToString("MMM dd")</RadzenText>
                                                <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" Style="margin-top: 0.5rem;">
                                                    <div>
                                                        <RadzenText TextStyle="TextStyle.Caption" Style="opacity: 0.7;">Events</RadzenText>
                                                        <RadzenText TextStyle="TextStyle.H6" Style="font-weight: 700;">@forecast.PredictedEventCount</RadzenText>
                                                    </div>
                                                    <div>
                                                        <RadzenText TextStyle="TextStyle.Caption" Style="opacity: 0.7;">Hours</RadzenText>
                                                        <RadzenText TextStyle="TextStyle.H6" Style="font-weight: 700;">@forecast.PredictedHours.ToString("F0")</RadzenText>
                                                    </div>
                                                </RadzenStack>
                                                <RadzenBadge Text="@forecast.WorkloadLevel" Style="@GetWorkloadBadgeStyle(forecast.WorkloadLevel)" />
                                            </RadzenStack>
                                        </RadzenCard>
                                    </RadzenColumn>
                                }
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenCard>
                }
            }
        }
    </RadzenStack>
</div>

<style>
    /* Analytics Page Styling */
    .rz-card {
        transition: box-shadow 0.3s ease, transform 0.3s ease;
    }

    .rz-card:hover {
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        transform: translateY(-2px);
    }
</style>

@code {
    private CalendarAnalytics? _analytics;
    private TrendAnalysis? _trendAnalysis;
    private List<WorkloadForecast> _workloadForecasts = new();
    private bool _loading = true;
    private int _selectedDays = 30;
    private string _userId = string.Empty;
    private string _userName = string.Empty;
    private bool _downloadingPdf = false;
    private bool _downloadingCsv = false;
    private bool _downloadingExcel = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                _userId = appUser.Id;
                _userName = appUser.Email ?? appUser.UserName ?? "User";
                await LoadAnalytics(30);
            }
        }
    }

    private async Task LoadAnalytics(int days)
    {
        _loading = true;
        _selectedDays = days;
        StateHasChanged();

        try
        {
            _analytics = await AnalyticsService.GetQuickStatsAsync(_userId, days);

            // Load trend analysis and forecasts
            _trendAnalysis = await TrendForecastService.GenerateTrendAnalysisAsync(_userId, days, 30);
            _workloadForecasts = await TrendForecastService.ForecastWorkloadAsync(_userId, 28);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private string GetPeriodText()
    {
        return _selectedDays switch
        {
            7 => "Last 7 Days",
            30 => "Last 30 Days",
            90 => "Last 90 Days",
            365 => "Last Year",
            _ => $"Last {_selectedDays} Days"
        };
    }

    private string GetHealthScoreColor()
    {
        if (_analytics == null) return "#667eea";

        var score = _analytics.Productivity.CalendarHealthScore;
        if (score >= 80) return "#43e97b";
        if (score >= 60) return "#667eea";
        if (score >= 40) return "#fa709a";
        return "#ff6b6b";
    }

    private string GetHealthScoreLabel()
    {
        if (_analytics == null) return "Good";

        var score = _analytics.Productivity.CalendarHealthScore;
        if (score >= 80) return "Excellent";
        if (score >= 60) return "Good";
        if (score >= 40) return "Fair";
        return "Needs Improvement";
    }

    private async Task DownloadPdfReport()
    {
        if (_analytics == null) return;

        _downloadingPdf = true;
        StateHasChanged();

        try
        {
            var pdfBytes = await ReportService.GeneratePdfReportAsync(_analytics, _userName, _trendAnalysis);
            var fileName = $"Tempus_Analytics_Report_{DateTime.Now:yyyyMMdd}.pdf";
            await DownloadFile(fileName, pdfBytes, "application/pdf");
        }
        finally
        {
            _downloadingPdf = false;
            StateHasChanged();
        }
    }

    private async Task DownloadCsvReport()
    {
        if (_analytics == null) return;

        _downloadingCsv = true;
        StateHasChanged();

        try
        {
            var csvBytes = await ReportService.GenerateCsvReportAsync(_analytics, _trendAnalysis);
            var fileName = $"Tempus_Analytics_Data_{DateTime.Now:yyyyMMdd}.csv";
            await DownloadFile(fileName, csvBytes, "text/csv");
        }
        finally
        {
            _downloadingCsv = false;
            StateHasChanged();
        }
    }

    private async Task DownloadExcelReport()
    {
        if (_analytics == null) return;

        _downloadingExcel = true;
        StateHasChanged();

        try
        {
            var excelBytes = await ReportService.GenerateExcelReportAsync(_analytics, _userName, _trendAnalysis);
            var fileName = $"Tempus_Analytics_Report_{DateTime.Now:yyyyMMdd}.xlsx";
            await DownloadFile(fileName, excelBytes, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        }
        finally
        {
            _downloadingExcel = false;
            StateHasChanged();
        }
    }

    private async Task DownloadFile(string fileName, byte[] fileBytes, string contentType)
    {
        var base64 = Convert.ToBase64String(fileBytes);
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64, contentType);
    }

    // Trend visualization helper methods
    private string GetTrendIcon(TrendDirection direction)
    {
        return direction switch
        {
            TrendDirection.Increasing => "trending_up",
            TrendDirection.Decreasing => "trending_down",
            TrendDirection.Stable => "trending_flat",
            TrendDirection.Volatile => "show_chart",
            _ => "trending_flat"
        };
    }

    private string GetTrendColor(TrendDirection direction)
    {
        return direction switch
        {
            TrendDirection.Increasing => "color: #43e97b;",
            TrendDirection.Decreasing => "color: #fa709a;",
            TrendDirection.Stable => "color: #667eea;",
            TrendDirection.Volatile => "color: #ffa500;",
            _ => "color: #667eea;"
        };
    }

    private string GetWorkloadCardStyle(string level)
    {
        return level switch
        {
            "Light" => "background: linear-gradient(135deg, rgba(67, 233, 123, 0.1) 0%, rgba(56, 249, 215, 0.1) 100%);",
            "Moderate" => "background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);",
            "Heavy" => "background: linear-gradient(135deg, rgba(250, 112, 154, 0.1) 0%, rgba(254, 225, 64, 0.1) 100%);",
            "Very Heavy" => "background: linear-gradient(135deg, rgba(255, 107, 107, 0.1) 0%, rgba(255, 69, 96, 0.1) 100%);",
            _ => "background: rgba(102, 126, 234, 0.05);"
        };
    }

    private string GetWorkloadBadgeStyle(string level)
    {
        return level switch
        {
            "Light" => "background: #43e97b; color: white;",
            "Moderate" => "background: #667eea; color: white;",
            "Heavy" => "background: #fa709a; color: white;",
            "Very Heavy" => "background: #ff6b6b; color: white;",
            _ => "background: #667eea; color: white;"
        };
    }
}
