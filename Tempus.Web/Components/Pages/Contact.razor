@page "/contact"
@using System.ComponentModel.DataAnnotations
@using Radzen
@using Radzen.Blazor
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web

<PageTitle>Contact Us - Tempus</PageTitle>

<div class="contact-form-container">
    <div class="contact-form-card">
        <div class="contact-form-header">
            <h1 class="contact-form-title">Contact Us</h1>
            <p class="contact-form-subtitle">Have a question or need support? Send us a message and we'll get back to you as soon as possible.</p>
        </div>

        <EditForm Model="_model" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="contact-form-fieldset">
                <div class="contact-form-field">
                    <label class="contact-form-label">Name</label>
                    <InputText @bind-Value="_model.Name" class="contact-form-input" placeholder="Enter your full name" />
                    <ValidationMessage For="() => _model.Name" class="contact-form-validation" />
                </div>

                <div class="contact-form-field">
                    <label class="contact-form-label">Email</label>
                    <InputText @bind-Value="_model.Email" class="contact-form-input" placeholder="your.email@example.com" type="email" />
                    <ValidationMessage For="() => _model.Email" class="contact-form-validation" />
                </div>

                <div class="contact-form-field">
                    <label class="contact-form-label">Subject</label>
                    <InputText @bind-Value="_model.Subject" class="contact-form-input" placeholder="What is this regarding?" />
                    <ValidationMessage For="() => _model.Subject" class="contact-form-validation" />
                </div>

                <div class="contact-form-field">
                    <label class="contact-form-label">Message</label>
                    <InputTextArea @bind-Value="_model.Message" Rows="6" class="contact-form-textarea" placeholder="Tell us how we can help you..." />
                    <ValidationMessage For="() => _model.Message" class="contact-form-validation" />
                </div>
            </div>

            <div class="contact-form-buttons">
                <button type="submit" class="contact-form-button-submit">Send Message</button>
                <button type="button" class="contact-form-button-reset" @onclick="Reset">Reset</button>
            </div>

            @if (_submitted)
            {
                <div class="contact-form-success">
                    Thanks! Your message has been received. We'll get back to you shortly.
                </div>
            }
        </EditForm>
    </div>
</div>

@code {
    private ContactModel _model = new();
    private bool _submitted = false;

    private void Reset()
    {
        _model = new ContactModel();
        _submitted = false;
    }

    private async Task HandleValidSubmit()
    {
        // For now, we simply set submitted. Replace with email or ticketing integration as needed.
        _submitted = true;
        await Task.CompletedTask;
    }

    private class ContactModel
    {
        [Required]
        public string Name { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Subject { get; set; } = string.Empty;

        [Required]
        [MinLength(10)]
        public string Message { get; set; } = string.Empty;
    }
}