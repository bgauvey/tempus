@page "/addressbook"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Tempus.Core.Interfaces
@using Tempus.Core.Models
@using Tempus.Web.Components.Dialogs
@attribute [Authorize]
@inject IContactRepository ContactRepository
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Address Book - Tempus</PageTitle>

<div class="page-header">
    <h1 style="font-size: 2rem; font-weight: 700; color: #1a202c; margin: 0;">ðŸ“‡ Address Book</h1>
    <p style="color: #718096; margin-top: 0.5rem;">Manage your contacts and connections</p>
</div>

<RadzenStack Gap="1.5rem" Style="margin-top: 2rem;">
    <!-- Toolbar -->
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem">
            <RadzenButton Icon="add" Text="New Contact" ButtonStyle="ButtonStyle.Success" Click="@OpenNewContactDialog" />
            <RadzenButton Icon="upload_file" Text="Import CSV" ButtonStyle="ButtonStyle.Primary" Click="@OpenImportDialog" />
        </RadzenStack>

        <RadzenTextBox Placeholder="Search contacts..." Style="width: 300px;"
                      @bind-Value="@_searchTerm" @oninput="@OnSearchInput" />
    </RadzenStack>

    <!-- Data Grid -->
    @if (_loading)
    {
        <div style="display: flex; justify-content: center; align-items: center; min-height: 400px;">
            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
        </div>
    }
    else if (_contacts.Any())
    {
        <RadzenDataGrid Data="@_filteredContacts" TItem="Tempus.Core.Models.Contact" AllowFiltering="true" AllowSorting="true"
                       AllowPaging="true" PageSize="20" PagerHorizontalAlign="HorizontalAlign.Center"
                       Style="box-shadow: 0 4px 6px rgba(0,0,0,0.1); border-radius: 8px;">
            <Columns>
                <RadzenDataGridColumn TItem="Tempus.Core.Models.Contact" Property="Name" Title="Name" Width="200px">
                    <Template Context="contact">
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                            <div style="width: 40px; height: 40px; border-radius: 50%; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); display: flex; align-items: center; justify-content: center; color: white; font-weight: 600;">
                                @GetInitials(contact.Name)
                            </div>
                            <RadzenText TextStyle="TextStyle.Body1" Style="font-weight: 600;">@contact.Name</RadzenText>
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Tempus.Core.Models.Contact" Property="Email" Title="Email" Width="250px">
                    <Template Context="contact">
                        <a href="mailto:@contact.Email" style="color: #4299e1; text-decoration: none;">@contact.Email</a>
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Tempus.Core.Models.Contact" Property="Phone" Title="Phone" Width="150px">
                    <Template Context="contact">
                        @if (!string.IsNullOrEmpty(contact.Phone))
                        {
                            <span>@contact.Phone</span>
                        }
                        else
                        {
                            <span style="color: #a0aec0;">â€”</span>
                        }
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Tempus.Core.Models.Contact" Property="Company" Title="Company" Width="180px">
                    <Template Context="contact">
                        @if (!string.IsNullOrEmpty(contact.Company))
                        {
                            <span>@contact.Company</span>
                        }
                        else
                        {
                            <span style="color: #a0aec0;">â€”</span>
                        }
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Tempus.Core.Models.Contact" Property="JobTitle" Title="Job Title" Width="180px">
                    <Template Context="contact">
                        @if (!string.IsNullOrEmpty(contact.JobTitle))
                        {
                            <span>@contact.JobTitle</span>
                        }
                        else
                        {
                            <span style="color: #a0aec0;">â€”</span>
                        }
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Tempus.Core.Models.Contact" Title="Source" Width="100px" Sortable="false" Filterable="false">
                    <Template Context="contact">
                        @if (contact.IsAutoCreated)
                        {
                            <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="Auto" />
                        }
                        else
                        {
                            <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="Manual" />
                        }
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Tempus.Core.Models.Contact" Title="Actions" Width="120px" Sortable="false" Filterable="false">
                    <Template Context="contact">
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small"
                                        Click="@(() => OpenEditContactDialog(contact.Id))" />
                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"
                                        Click="@(() => DeleteContact(contact.Id))" />
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
    else
    {
        <div style="text-align: center; padding: 4rem; color: #718096;">
            <RadzenIcon Icon="contacts" Style="font-size: 4rem; color: #cbd5e0; margin-bottom: 1rem;" />
            <p style="font-size: 1.25rem; font-weight: 600; margin-bottom: 0.5rem;">No contacts yet</p>
            <p>Start by adding a new contact or importing from CSV</p>
            <RadzenButton Icon="add" Text="Add Your First Contact" ButtonStyle="ButtonStyle.Success"
                        Click="@OpenNewContactDialog" Style="margin-top: 1rem;" />
        </div>
    }
</RadzenStack>

@code {
    private List<Tempus.Core.Models.Contact> _contacts = new();
    private List<Tempus.Core.Models.Contact> _filteredContacts = new();
    private bool _loading = true;
    private string _userId = string.Empty;
    private string _searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                _userId = appUser.Id;
            }
        }

        await LoadContacts();
    }

    private async Task LoadContacts()
    {
        _loading = true;
        _contacts = await ContactRepository.GetAllAsync(_userId);
        _filteredContacts = _contacts;
        _loading = false;
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterContacts();
    }

    private void FilterContacts()
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredContacts = _contacts;
        }
        else
        {
            var search = _searchTerm.ToLower();
            _filteredContacts = _contacts.Where(c =>
                c.Name.ToLower().Contains(search) ||
                c.Email.ToLower().Contains(search) ||
                (c.Company != null && c.Company.ToLower().Contains(search)) ||
                (c.JobTitle != null && c.JobTitle.ToLower().Contains(search))
            ).ToList();
        }
    }

    private async Task OpenNewContactDialog()
    {
        var result = await DialogService.OpenAsync<ContactFormDialog>(
            "New Contact",
            null,
            new DialogOptions
            {
                Width = "600px",
                Height = "auto",
                Resizable = true,
                Draggable = true
            });

        if (result is bool saved && saved)
        {
            await LoadContacts();
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Contact created successfully");
        }
    }

    private async Task OpenEditContactDialog(Guid contactId)
    {
        var parameters = new Dictionary<string, object>
        {
            { "ContactId", contactId }
        };

        var result = await DialogService.OpenAsync<ContactFormDialog>(
            "Edit Contact",
            parameters,
            new DialogOptions
            {
                Width = "600px",
                Height = "auto",
                Resizable = true,
                Draggable = true
            });

        if (result is bool saved && saved)
        {
            await LoadContacts();
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Contact updated successfully");
        }
    }

    private async Task DeleteContact(Guid contactId)
    {
        var result = await DialogService.Confirm("Are you sure you want to delete this contact?", "Delete Contact",
            new ConfirmOptions { OkButtonText = "Delete", CancelButtonText = "Cancel" });

        if (result == true)
        {
            await ContactRepository.DeleteAsync(contactId, _userId);
            await LoadContacts();
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Contact deleted successfully");
        }
    }

    private void OpenImportDialog()
    {
        NotificationService.Notify(NotificationSeverity.Info, "Coming Soon", "CSV import functionality will be available soon");
    }

    private string GetInitials(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return "?";

        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 1)
            return parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper();

        return (parts[0][0].ToString() + parts[^1][0].ToString()).ToUpper();
    }
}
