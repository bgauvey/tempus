@page "/addresses"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Tempus.Core.Interfaces
@using Tempus.Core.Models
@using Tempus.Web.Components.Dialogs
@using Tempus.Web.Components.Shared
@attribute [Authorize]
@inject IContactRepository ContactRepository
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Address Book - Tempus</PageTitle>

<div style="padding: 2rem;">
    <RadzenStack Gap="2rem">
        <!-- Header Card -->
        <RadzenCard Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 16px; padding: 2rem; box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);">
            <RadzenStack Gap="0.5rem">
                <RadzenText TextStyle="TextStyle.DisplayH4" Style="font-weight: 800; margin: 0;">ðŸ“‡ Address Book</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Style="opacity: 0.9;">Manage your contacts and connections</RadzenText>
            </RadzenStack>
        </RadzenCard>

        <!-- Main Content -->
        @if (_loading)
        {
            <RadzenCard>
                <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="min-height: 400px;">
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
                </RadzenStack>
            </RadzenCard>
        }
        else if (!_contacts.Any())
        {
            <RadzenCard>
                <RadzenStack AlignItems="AlignItems.Center" Gap="1rem" Style="padding: 3rem; text-align: center;">
                    <RadzenText Style="font-size: 5rem; opacity: 0.5;">ðŸ“‡</RadzenText>
                    <RadzenText TextStyle="TextStyle.H4" Style="font-weight: 700;">No Contacts Yet</RadzenText>
                    <RadzenText>Start building your network by adding your first contact!</RadzenText>
                    <RadzenButton Icon="add" Text="Add Your First Contact" ButtonStyle="ButtonStyle.Primary"
                                Click="@(() => OpenContactDialogAsync(null))"
                                Style="font-size: 1.1rem; padding: 1rem 2rem; border-radius: 12px; margin-top: 1rem;" />
                </RadzenStack>
            </RadzenCard>
        }
        else
        {
            <AddressesGrid Contacts="@_contacts"
                          IsLoading="@_loading"
                          OnSearch="@SearchContactsAsync"
                          OnEditContact="@EditContactAsync"
                          OnDeleteContact="@DeleteContactAsync"
                          OnCreateContact="@(() => OpenContactDialogAsync(null))" />
        }
    </RadzenStack>
</div>

@code {
    private List<Tempus.Core.Models.Contact> _contacts = new();
    private bool _loading = true;
    private string _userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                _userId = appUser.Id;
            }
        }

        await LoadContactsAsync();
    }

    private async Task LoadContactsAsync()
    {
        _loading = true;
        StateHasChanged();
        _contacts = await ContactRepository.GetAllAsync(_userId);
        _loading = false;
        StateHasChanged();
    }

    private async Task SearchContactsAsync(string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadContactsAsync();
        }
        else
        {
            _loading = true;
            _contacts = await ContactRepository.SearchAsync(searchTerm, _userId);
            _loading = false;
        }
    }

    private async Task OpenContactDialogAsync(Guid? contactId)
    {
        var parameters = new Dictionary<string, object>();

        if (contactId.HasValue)
        {
            parameters.Add("ContactId", contactId.Value);
        }

        var result = await DialogService.OpenAsync<AddressFormDialog>(
            contactId.HasValue ? "Edit Contact" : "Add Contact",
            parameters,
            new DialogOptions
            {
                Width = "600px",
                Height = "auto",
                Resizable = true,
                Draggable = true
            });

        // If the dialog was saved (result == true), reload contacts
        if (result is bool saved && saved)
        {
            await LoadContactsAsync();
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = contactId.HasValue ? "Contact updated successfully" : "Contact added successfully",
                Duration = 4000
            });
        }
    }

    private async Task EditContactAsync(Guid contactId)
    {
        await OpenContactDialogAsync(contactId);
    }

    private async Task DeleteContactAsync(Guid contactId)
    {
        var contact = _contacts.FirstOrDefault(c => c.Id == contactId);
        if (contact == null) return;

        var result = await DialogService.Confirm(
            $"Are you sure you want to delete {contact.Name}?",
            "Delete Contact",
            new ConfirmOptions() { OkButtonText = "Delete", CancelButtonText = "Cancel" });

        if (result == true)
        {
            await ContactRepository.DeleteAsync(contactId, _userId);
            await LoadContactsAsync();
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = "Contact deleted successfully",
                Duration = 4000
            });
        }
    }
}
