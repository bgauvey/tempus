@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Tempus.Core.Interfaces
@using Tempus.Core.Models
@using Tempus.Core.Enums
@using Tempus.Core.Helpers
@inject IEventRepository EventRepository
@inject IContactRepository ContactRepository
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NotificationService NotificationService

<RadzenTabs>
    <Tabs>
        <!-- Details Tab -->
        <RadzenTabsItem Text="Details" Icon="event">
            <RadzenStack Gap="1rem" Style="padding: 1rem;">
                <RadzenFormField Text="Title" Variant="Variant.Outlined">
                    <RadzenTextBox @bind-Value="@_event.Title" Style="width: 100%;" />
                </RadzenFormField>

                <RadzenFormField Text="Description" Variant="Variant.Outlined">
                    <RadzenTextArea @bind-Value="@_event.Description" Style="width: 100%;" Rows="3" />
                </RadzenFormField>

                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenFormField Text="@(IsAllDay ? "Start Date" : "Start Date/Time")" Variant="Variant.Outlined">
                            <RadzenDatePicker @bind-Value="@StartTime" ShowTime="@(!IsAllDay)"
                                            DateFormat="@(IsAllDay ? "MM/dd/yyyy" : "MM/dd/yyyy hh:mm tt")" Style="width: 100%;" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenFormField Text="@(IsAllDay ? "End Date" : "End Date/Time")" Variant="Variant.Outlined">
                            <RadzenDatePicker @bind-Value="@EndTime" ShowTime="@(!IsAllDay)"
                                            DateFormat="@(IsAllDay ? "MM/dd/yyyy" : "MM/dd/yyyy hh:mm tt")" Style="width: 100%;" />
                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenFormField Text="Location" Variant="Variant.Outlined">
                    <RadzenTextBox @bind-Value="@_event.Location" Style="width: 100%;" />
                </RadzenFormField>

                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenFormField Text="Event Type" Variant="Variant.Outlined">
                            <RadzenDropDown @bind-Value="@_event.EventType" Data="@_eventTypes"
                                          Change="@OnEventTypeChanged"
                                          Style="width: 100%;" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenFormField Text="Priority" Variant="Variant.Outlined">
                            <RadzenDropDown @bind-Value="@_event.Priority" Data="@_priorities"
                                          Style="width: 100%;" />
                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                    <RadzenCheckBox @bind-Value="@IsAllDay" />
                    <RadzenLabel Text="All Day Event" Style="margin: 0; cursor: pointer;" />
                </RadzenStack>

                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                    <RadzenLabel Text="Color" Style="margin: 0; min-width: 80px;" />
                    <RadzenColorPicker @bind-Value="@_event.Color" />
                </RadzenStack>
            </RadzenStack>
        </RadzenTabsItem>

        <!-- Meeting Tab (only for Meeting type events) -->
        @if (_event.EventType == EventType.Meeting)
        {
            <RadzenTabsItem Text="Meeting" Icon="groups">
                <RadzenStack Gap="1rem" Style="padding: 1rem;">
                    <!-- Attendees Section -->
                    <RadzenFieldset Text="Attendees">
                        <RadzenStack Gap="1rem">
                @if (_event.Attendees.Any())
                {
                    <div style="max-height: 200px; overflow-y: auto;">
                        @foreach (var attendee in _event.Attendees)
                        {
                            <RadzenCard Style="padding: 0.75rem; margin-bottom: 0.5rem;">
                                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
                                    <RadzenStack Gap="0.25rem">
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                            <RadzenText TextStyle="TextStyle.Body1" Style="font-weight: 600;">@attendee.Name</RadzenText>
                                            @if (attendee.IsOrganizer)
                                            {
                                                <RadzenBadge Text="Organizer" BadgeStyle="BadgeStyle.Info" Variant="Variant.Filled" />
                                            }
                                        </RadzenStack>
                                        <RadzenText TextStyle="TextStyle.Body2" Style="color: #718096;">@attendee.Email</RadzenText>
                                    </RadzenStack>
                                    @if (!attendee.IsOrganizer)
                                    {
                                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"
                                                    Click="@(() => RemoveAttendee(attendee))" />
                                    }
                                </RadzenStack>
                            </RadzenCard>
                        }
                    </div>
                }
                else
                {
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: #718096; font-style: italic;">No attendees added yet</RadzenText>
                }

                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12">
                        <RadzenFormField Text="Search Contacts" Variant="Variant.Outlined">
                            <RadzenAutoComplete @bind-Value="@_selectedContactEmail"
                                              Data="@_contacts"
                                              TextProperty="Email"
                                              ValueProperty="Email"
                                              Change="@OnContactSelected"
                                              Placeholder="Type to search contacts or enter new email..."
                                              Style="width: 100%;"
                                              FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                              AllowCustomValues="true" />
                        </RadzenFormField>
                        @if (!string.IsNullOrWhiteSpace(_selectedContactEmail))
                        {
                            <RadzenText TextStyle="TextStyle.Caption" Style="color: #718096; margin-top: 0.5rem;">
                                @if (_contacts.Any(c => c.Email.Equals(_selectedContactEmail, StringComparison.OrdinalIgnoreCase)))
                                {
                                    <span>✓ Contact found in address book</span>
                                }
                                else if (IsValidEmail(_selectedContactEmail))
                                {
                                    <span>⊕ New contact - will be added to address book</span>
                                }
                            </RadzenText>
                        }
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow Gap="1rem" Style="margin-top: 0.5rem;">
                    <RadzenColumn Size="12" SizeMD="10">
                        <RadzenFormField Text="Name (for new contacts)" Variant="Variant.Outlined">
                            <RadzenTextBox @bind-Value="@_newAttendeeName" Placeholder="Enter name" Style="width: 100%;"
                                         Disabled="@(_selectedContact != null)" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="2" Style="display: flex; align-items: flex-end;">
                        <RadzenButton Icon="add" Text="Add" ButtonStyle="ButtonStyle.Success"
                                    Click="AddAttendee" Disabled="@(!CanAddAttendee())" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
                    </RadzenFieldset>

                    <!-- Meeting Cost Calculator -->
                    <RadzenFieldset Text="Meeting Cost Calculator">
                        <RadzenStack Gap="1rem">
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenFormField Text="Hourly Cost Per Attendee" Variant="Variant.Outlined">
                            <RadzenNumeric @bind-Value="@_event.HourlyCostPerAttendee"
                                         Min="0"
                                         Step="5"
                                         Format="c"
                                         Style="width: 100%;" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="6">
                        <div style="padding: 1rem; background: linear-gradient(135deg, #667eea15 0%, #764ba215 100%); border-radius: 8px; border: 1px solid #667eea30;">
                            <RadzenStack Gap="0.5rem">
                                <RadzenText TextStyle="TextStyle.Caption" Style="color: #718096; font-weight: 600;">ESTIMATED MEETING COST</RadzenText>
                                <RadzenText TextStyle="TextStyle.H4" Style="margin: 0; background: var(--primary-gradient); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; font-weight: 800;">
                                    @CalculateMeetingCost().ToString("C")
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption" Style="color: #718096;">
                                    @_event.Attendees.Count attendee(s) × @GetMeetingDuration().ToString("0.##") hour(s)
                                </RadzenText>
                            </RadzenStack>
                        </div>
                    </RadzenColumn>
                </RadzenRow>
                <div style="padding: 0.75rem; background: #f8f9fa; border-radius: 8px; font-size: 0.85rem; color: #718096;">
                    <RadzenIcon Icon="info" Style="font-size: 1rem; vertical-align: middle; margin-right: 0.25rem;" />
                    <strong>Note:</strong> This cost will be saved and used for monthly meeting analysis reports.
                </div>
                        </RadzenStack>
                    </RadzenFieldset>
                </RadzenStack>
            </RadzenTabsItem>
        }

        <!-- Recurrence Tab (hidden when editing single occurrence) -->
        @if (!EditSingleOccurrence)
        {
            <RadzenTabsItem Text="Recurrence" Icon="repeat">
                <RadzenStack Gap="1rem" Style="padding: 1rem;">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                    <RadzenCheckBox @bind-Value="@_event.IsRecurring" />
                    <RadzenLabel Text="Recurring Event" Style="margin: 0; cursor: pointer;" />
                </RadzenStack>

                @if (_event.IsRecurring)
            {
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenFormField Text="Pattern" Variant="Variant.Outlined">
                            <RadzenDropDown @bind-Value="@_event.RecurrencePattern" Data="@_recurrencePatterns"
                                          Style="width: 100%;" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenFormField Text="Every" Variant="Variant.Outlined">
                            <RadzenNumeric @bind-Value="@_event.RecurrenceInterval" Min="1" Max="99"
                                         Style="width: 100%;" />
                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>

                @if (_event.RecurrencePattern == RecurrencePattern.Weekly)
                {
                    <RadzenFormField Text="Repeat On" Variant="Variant.Outlined">
                        <RadzenCheckBoxList @bind-Value="@_selectedDaysOfWeek" TValue="int"
                                          Orientation="Orientation.Horizontal"
                                          Data="@_daysOfWeek" TextProperty="Text" ValueProperty="Value" />
                    </RadzenFormField>
                }

                <RadzenFormField Text="Ends" Variant="Variant.Outlined">
                    <RadzenDropDown @bind-Value="@_event.RecurrenceEndType" Data="@_recurrenceEndTypes"
                                  Style="width: 100%;" />
                </RadzenFormField>

                @if (_event.RecurrenceEndType == RecurrenceEndType.AfterOccurrences)
                {
                    <RadzenFormField Text="Number of Occurrences" Variant="Variant.Outlined">
                        <RadzenNumeric @bind-Value="@_event.RecurrenceCount" Min="1" Max="999"
                                     Style="width: 100%;" />
                    </RadzenFormField>
                }
                else if (_event.RecurrenceEndType == RecurrenceEndType.OnDate)
                {
                    <RadzenFormField Text="End Date" Variant="Variant.Outlined">
                        <RadzenDatePicker @bind-Value="@_event.RecurrenceEndDate" Style="width: 100%;" />
                    </RadzenFormField>
                }

                        <div style="padding: 0.75rem; background: #f8f9fa; border-radius: 8px; font-size: 0.9rem;">
                            <strong>Summary:</strong> @GetRecurrenceSummary()
                        </div>
                    }
                </RadzenStack>
            </RadzenTabsItem>
        }
    </Tabs>
</RadzenTabs>

<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" JustifyContent="JustifyContent.End" Style="margin-top: 1rem; padding: 1rem; border-top: 1px solid #e2e8f0;">
    <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Light" Click="Cancel" />
    <RadzenButton Text="@(GetSaveButtonText())" ButtonStyle="ButtonStyle.Primary"
                Click="Save" Disabled="@(!IsValid())" />
</RadzenStack>

@code {
    [Parameter]
    public Guid? EventId { get; set; }

    [Parameter]
    public DateTime? PrefilledDate { get; set; }

    [Parameter]
    public bool EditSingleOccurrence { get; set; }

    [Parameter]
    public Event? InstanceEvent { get; set; }

    private Event _event = new Event
    {
        Title = string.Empty,
        StartTime = DateTime.Now,
        EndTime = DateTime.Now.AddHours(1),
        EventType = EventType.Meeting,
        Priority = Priority.Medium,
        Color = "#1E88E5", // Default blue for meetings
        Attendees = new List<Attendee>(),
        Tags = new List<string>()
    };

    private readonly EventType[] _eventTypes = Enum.GetValues<EventType>();
    private readonly Priority[] _priorities = Enum.GetValues<Priority>();
    private readonly RecurrencePattern[] _recurrencePatterns = Enum.GetValues<RecurrencePattern>();
    private readonly RecurrenceEndType[] _recurrenceEndTypes = Enum.GetValues<RecurrenceEndType>();
    private string _userId = string.Empty;
    private string _userEmail = string.Empty;
    private string _userName = string.Empty;

    // Attendee management
    private string _newAttendeeName = string.Empty;
    private string _selectedContactEmail = string.Empty;
    private List<Tempus.Core.Models.Contact> _contacts = new();
    private Tempus.Core.Models.Contact? _selectedContact = null;

    // Track if end time has been manually set
    private bool _endTimeManuallySet = false;
    // Track the duration for existing events
    private TimeSpan _eventDuration = TimeSpan.FromMinutes(30);
    // Track if this is an existing event
    private bool _isExistingEvent = false;

    // Start time property with automatic end time adjustment
    private DateTime StartTime
    {
        get => _event.StartTime;
        set
        {
            _event.StartTime = value;

            if (!_endTimeManuallySet)
            {
                if (_isExistingEvent)
                {
                    // For existing events, maintain the duration
                    _event.EndTime = value.Add(_eventDuration);
                }
                else
                {
                    // For new events, use default 30 minutes
                    _event.EndTime = value.AddMinutes(30);
                }
            }
        }
    }

    // End time property to track manual changes
    private DateTime EndTime
    {
        get => _event.EndTime;
        set
        {
            _event.EndTime = value;
            _endTimeManuallySet = true;
            // Update the duration when manually set
            _eventDuration = _event.EndTime - _event.StartTime;
        }
    }

    // All day property to handle midnight time setting
    private bool IsAllDay
    {
        get => _event.IsAllDay;
        set
        {
            _event.IsAllDay = value;
            if (value)
            {
                // Set times to midnight for all-day events
                _event.StartTime = _event.StartTime.Date;
                _event.EndTime = _event.EndTime.Date;
            }
        }
    }

    private IEnumerable<int> _selectedDaysOfWeek
    {
        get
        {
            if (string.IsNullOrEmpty(_event.RecurrenceDaysOfWeek))
                return new List<int>();

            return _event.RecurrenceDaysOfWeek.Split(',')
                .Select(d => int.TryParse(d.Trim(), out var day) ? day : -1)
                .Where(d => d >= 0);
        }
        set
        {
            _event.RecurrenceDaysOfWeek = value != null && value.Any()
                ? string.Join(",", value.OrderBy(d => d))
                : null;
        }
    }

    private readonly List<DayOfWeekOption> _daysOfWeek = new()
    {
        new DayOfWeekOption { Text = "Sun", Value = 0 },
        new DayOfWeekOption { Text = "Mon", Value = 1 },
        new DayOfWeekOption { Text = "Tue", Value = 2 },
        new DayOfWeekOption { Text = "Wed", Value = 3 },
        new DayOfWeekOption { Text = "Thu", Value = 4 },
        new DayOfWeekOption { Text = "Fri", Value = 5 },
        new DayOfWeekOption { Text = "Sat", Value = 6 }
    };

    private class DayOfWeekOption
    {
        public string Text { get; set; } = string.Empty;
        public int Value { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                _userId = appUser.Id;
                _userEmail = appUser.Email ?? string.Empty;

                // Get user's display name from claims or use email
                var name = user.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value;
                _userName = !string.IsNullOrEmpty(name) ? name : _userEmail.Split('@')[0];
            }
        }

        // Load contacts for autocomplete
        _contacts = await ContactRepository.GetAllAsync(_userId);

        if (EditSingleOccurrence && InstanceEvent != null)
        {
            // Editing a single occurrence - use the instance data but don't save yet
            _event = new Event
            {
                Id = Guid.NewGuid(),
                Title = InstanceEvent.Title,
                Description = InstanceEvent.Description,
                StartTime = InstanceEvent.StartTime,
                EndTime = InstanceEvent.EndTime,
                Location = InstanceEvent.Location,
                EventType = InstanceEvent.EventType,
                Priority = InstanceEvent.Priority,
                IsAllDay = InstanceEvent.IsAllDay,
                Color = InstanceEvent.Color,
                UserId = _userId,
                IsRecurring = false,
                IsRecurrenceException = true,
                RecurrenceExceptionDate = InstanceEvent.StartTime.Date,
                RecurrenceParentId = InstanceEvent.RecurrenceParentId ?? InstanceEvent.Id,
                Tags = InstanceEvent.Tags.ToList(),
                Attendees = InstanceEvent.Attendees.Select(a => new Attendee
                {
                    Id = Guid.Empty, // Use Empty GUID since this will be a new event
                    Name = a.Name,
                    Email = a.Email,
                    IsOrganizer = a.IsOrganizer,
                    Status = a.Status
                }).ToList(),
                CreatedAt = DateTime.UtcNow
            };
            // Calculate duration from existing event
            _eventDuration = _event.EndTime - _event.StartTime;
            _isExistingEvent = true;
        }
        else if (EventId.HasValue)
        {
            // Load existing event
            var existingEvent = await EventRepository.GetByIdAsync(EventId.Value, _userId);
            if (existingEvent != null)
            {
                _event = existingEvent;
                // Calculate duration from existing event
                _eventDuration = _event.EndTime - _event.StartTime;
                _isExistingEvent = true;
            }
        }
        else
        {
            // Set userId for new event
            _event.UserId = _userId;

            if (PrefilledDate.HasValue)
            {
                // Set start and end times based on prefilled date
                _event.StartTime = PrefilledDate.Value.Date.AddHours(9); // 9 AM
                _event.EndTime = PrefilledDate.Value.Date.AddHours(9).AddMinutes(30); // 9:30 AM
            }

            // Add current user as organizer for new meetings
            if (_event.EventType == EventType.Meeting)
            {
                AddCurrentUserAsOrganizer();
            }
        }
    }

    private bool IsValid()
    {
        return !string.IsNullOrWhiteSpace(_event.Title)
            && _event.EndTime > _event.StartTime;
    }

    private async Task Save()
    {
        try
        {
            // Auto-create contacts for attendees not in address book
            await AutoCreateContactsForAttendeesAsync();

            // Calculate and save meeting cost for meetings
            if (_event.EventType == EventType.Meeting)
            {
                _event.MeetingCost = CalculateMeetingCost();
            }

            if (EditSingleOccurrence)
            {
                // Create exception event for single occurrence edit
                _event.Id = Guid.NewGuid();
                _event.CreatedAt = DateTime.UtcNow;
                await EventRepository.CreateAsync(_event);
            }
            else if (EventId.HasValue)
            {
                // Update existing event (could be a regular event or the parent of a series)
                _event.UpdatedAt = DateTime.UtcNow;
                await EventRepository.UpdateAsync(_event);
            }
            else
            {
                // Create new event
                _event.Id = Guid.NewGuid();
                _event.CreatedAt = DateTime.UtcNow;
                await EventRepository.CreateAsync(_event);
            }

            DialogService.Close(true);
        }
        catch (Exception ex)
        {
            // Show error notification to user
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error Saving Event",
                Detail = $"An error occurred while saving the event: {ex.Message}",
                Duration = 4000
            });
            Console.WriteLine($"Error saving event: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task AutoCreateContactsForAttendeesAsync()
    {
        // Extract just the data we need to avoid any entity tracking issues
        var attendeesToProcess = _event.Attendees
            .Select(a => new { a.Email, a.Name })
            .ToList();

        foreach (var attendee in attendeesToProcess)
        {
            // Check if contact already exists in address book
            var existingContact = _contacts.FirstOrDefault(c =>
                c.Email.Equals(attendee.Email, StringComparison.OrdinalIgnoreCase));

            if (existingContact == null)
            {
                // Create new contact with IsAutoCreated flag
                var newContact = new Tempus.Core.Models.Contact
                {
                    Id = Guid.NewGuid(),
                    Name = attendee.Name,
                    Email = attendee.Email,
                    UserId = _userId,
                    IsAutoCreated = true,
                    CreatedAt = DateTime.UtcNow
                };

                await ContactRepository.CreateAsync(newContact);

                // Add to local list to avoid duplicates in same session
                _contacts.Add(newContact);
            }
        }
    }

    private string GetRecurrenceSummary()
    {
        return RecurrenceHelper.GetRecurrenceDescription(_event);
    }

    private string GetSaveButtonText()
    {
        if (EditSingleOccurrence)
            return "Update This Occurrence";
        else if (EventId.HasValue)
            return "Update";
        else
            return "Create";
    }

    private void Cancel()
    {
        DialogService.Close(false);
    }

    // Attendee management methods
    private void OnContactSelected()
    {
        if (!string.IsNullOrWhiteSpace(_selectedContactEmail))
        {
            // Find the contact in the list
            _selectedContact = _contacts.FirstOrDefault(c =>
                c.Email.Equals(_selectedContactEmail, StringComparison.OrdinalIgnoreCase));

            if (_selectedContact != null)
            {
                // Pre-fill the name from the contact
                _newAttendeeName = _selectedContact.Name;
            }
            // Don't clear the name for new contacts - let the user type it
        }
    }

    private bool CanAddAttendee()
    {
        if (string.IsNullOrWhiteSpace(_selectedContactEmail) || !IsValidEmail(_selectedContactEmail))
            return false;

        // Check if this email exists in contacts (look it up dynamically to be more robust)
        var existingContact = _contacts.FirstOrDefault(c =>
            c.Email.Equals(_selectedContactEmail, StringComparison.OrdinalIgnoreCase));

        // If it's a new contact (not in address book), name is required
        if (existingContact == null && string.IsNullOrWhiteSpace(_newAttendeeName))
            return false;

        // Check if attendee already added (including organizer)
        if (_event.Attendees.Any(a => a.Email.Equals(_selectedContactEmail, StringComparison.OrdinalIgnoreCase)))
            return false;

        return true;
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private void AddAttendee()
    {
        if (!CanAddAttendee())
            return;

        var attendeeName = _selectedContact?.Name ?? _newAttendeeName;

        var attendee = new Attendee
        {
            Id = Guid.Empty, // Use Empty GUID to indicate this is a new attendee
            Name = attendeeName,
            Email = _selectedContactEmail,
            EventId = _event.Id,
            Status = AttendeeStatus.Pending,
            IsOrganizer = false
        };

        _event.Attendees.Add(attendee);

        // Clear the input fields
        _newAttendeeName = string.Empty;
        _selectedContactEmail = string.Empty;
        _selectedContact = null;
    }

    private void RemoveAttendee(Attendee attendee)
    {
        _event.Attendees.Remove(attendee);
        StateHasChanged();
    }

    // Meeting Cost Calculator Methods
    private decimal CalculateMeetingCost()
    {
        if (_event.EventType != EventType.Meeting)
            return 0;

        var attendeeCount = _event.Attendees.Count;
        var durationHours = GetMeetingDuration();
        var hourlyRate = _event.HourlyCostPerAttendee;

        return attendeeCount * durationHours * hourlyRate;
    }

    private decimal GetMeetingDuration()
    {
        var duration = _event.EndTime - _event.StartTime;
        return (decimal)duration.TotalHours;
    }

    private void OnCostParametersChanged()
    {
        StateHasChanged();
    }

    // Auto-add organizer methods
    private void OnEventTypeChanged()
    {
        // When changing to Meeting type, add current user as organizer if not already present
        if (_event.EventType == EventType.Meeting && !_event.Attendees.Any(a => a.IsOrganizer))
        {
            AddCurrentUserAsOrganizer();
        }
        StateHasChanged();
    }

    private void AddCurrentUserAsOrganizer()
    {
        // Check if current user is already in attendees
        if (_event.Attendees.Any(a => a.Email.Equals(_userEmail, StringComparison.OrdinalIgnoreCase)))
            return;

        if (string.IsNullOrEmpty(_userEmail))
            return;

        var organizer = new Attendee
        {
            Id = Guid.Empty, // Use Empty GUID to indicate this is a new attendee
            Name = _userName,
            Email = _userEmail,
            EventId = _event.Id,
            Status = AttendeeStatus.Accepted,
            IsOrganizer = true
        };

        _event.Attendees.Insert(0, organizer); // Insert at the beginning so organizer is always first
    }
}
