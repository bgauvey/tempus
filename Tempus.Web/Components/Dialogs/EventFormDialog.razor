@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Tempus.Core.Interfaces
@using Tempus.Core.Models
@using Tempus.Core.Enums
@using Tempus.Core.Helpers
@inject IEventRepository EventRepository
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<RadzenStack Gap="1rem">
    <RadzenFormField Text="Title" Variant="Variant.Outlined">
        <RadzenTextBox @bind-Value="@_event.Title" Style="width: 100%;" />
    </RadzenFormField>

    <RadzenFormField Text="Description" Variant="Variant.Outlined">
        <RadzenTextArea @bind-Value="@_event.Description" Style="width: 100%;" Rows="3" />
    </RadzenFormField>

    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenFormField Text="Start Date/Time" Variant="Variant.Outlined">
                <RadzenDatePicker @bind-Value="@_event.StartTime" ShowTime="true"
                                DateFormat="MM/dd/yyyy hh:mm tt" Style="width: 100%;" />
            </RadzenFormField>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenFormField Text="End Date/Time" Variant="Variant.Outlined">
                <RadzenDatePicker @bind-Value="@_event.EndTime" ShowTime="true"
                                DateFormat="MM/dd/yyyy hh:mm tt" Style="width: 100%;" />
            </RadzenFormField>
        </RadzenColumn>
    </RadzenRow>

    <RadzenFormField Text="Location" Variant="Variant.Outlined">
        <RadzenTextBox @bind-Value="@_event.Location" Style="width: 100%;" />
    </RadzenFormField>

    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenFormField Text="Event Type" Variant="Variant.Outlined">
                <RadzenDropDown @bind-Value="@_event.EventType" Data="@_eventTypes"
                              Style="width: 100%;" />
            </RadzenFormField>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenFormField Text="Priority" Variant="Variant.Outlined">
                <RadzenDropDown @bind-Value="@_event.Priority" Data="@_priorities"
                              Style="width: 100%;" />
            </RadzenFormField>
        </RadzenColumn>
    </RadzenRow>

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
        <RadzenCheckBox @bind-Value="@_event.IsAllDay" />
        <RadzenLabel Text="All Day Event" Style="margin: 0; cursor: pointer;" />
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
        <RadzenLabel Text="Color" Style="margin: 0; min-width: 80px;" />
        <RadzenColorPicker @bind-Value="@_event.Color" />
    </RadzenStack>

    <!-- Recurrence Section (hidden when editing single occurrence) -->
    @if (!EditSingleOccurrence)
    {
        <RadzenFieldset Text="Recurrence" Style="margin-top: 1rem;">
            <RadzenStack Gap="1rem">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                    <RadzenCheckBox @bind-Value="@_event.IsRecurring" />
                    <RadzenLabel Text="Recurring Event" Style="margin: 0; cursor: pointer;" />
                </RadzenStack>

                @if (_event.IsRecurring)
            {
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenFormField Text="Pattern" Variant="Variant.Outlined">
                            <RadzenDropDown @bind-Value="@_event.RecurrencePattern" Data="@_recurrencePatterns"
                                          Style="width: 100%;" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="6">
                        <RadzenFormField Text="Every" Variant="Variant.Outlined">
                            <RadzenNumeric @bind-Value="@_event.RecurrenceInterval" Min="1" Max="99"
                                         Style="width: 100%;" />
                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>

                @if (_event.RecurrencePattern == RecurrencePattern.Weekly)
                {
                    <RadzenFormField Text="Repeat On" Variant="Variant.Outlined">
                        <RadzenCheckBoxList @bind-Value="@_selectedDaysOfWeek" TValue="int"
                                          Orientation="Orientation.Horizontal"
                                          Data="@_daysOfWeek" TextProperty="Text" ValueProperty="Value" />
                    </RadzenFormField>
                }

                <RadzenFormField Text="Ends" Variant="Variant.Outlined">
                    <RadzenDropDown @bind-Value="@_event.RecurrenceEndType" Data="@_recurrenceEndTypes"
                                  Style="width: 100%;" />
                </RadzenFormField>

                @if (_event.RecurrenceEndType == RecurrenceEndType.AfterOccurrences)
                {
                    <RadzenFormField Text="Number of Occurrences" Variant="Variant.Outlined">
                        <RadzenNumeric @bind-Value="@_event.RecurrenceCount" Min="1" Max="999"
                                     Style="width: 100%;" />
                    </RadzenFormField>
                }
                else if (_event.RecurrenceEndType == RecurrenceEndType.OnDate)
                {
                    <RadzenFormField Text="End Date" Variant="Variant.Outlined">
                        <RadzenDatePicker @bind-Value="@_event.RecurrenceEndDate" Style="width: 100%;" />
                    </RadzenFormField>
                }

                    <div style="padding: 0.75rem; background: #f8f9fa; border-radius: 8px; font-size: 0.9rem;">
                        <strong>Summary:</strong> @GetRecurrenceSummary()
                    </div>
                }
            </RadzenStack>
        </RadzenFieldset>
    }

    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" JustifyContent="JustifyContent.End">
        <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Light" Click="Cancel" />
        <RadzenButton Text="@(GetSaveButtonText())" ButtonStyle="ButtonStyle.Primary"
                    Click="Save" Disabled="@(!IsValid())" />
    </RadzenStack>
</RadzenStack>

@code {
    [Parameter]
    public Guid? EventId { get; set; }

    [Parameter]
    public DateTime? PrefilledDate { get; set; }

    [Parameter]
    public bool EditSingleOccurrence { get; set; }

    [Parameter]
    public Event? InstanceEvent { get; set; }

    private Event _event = new Event
    {
        Title = string.Empty,
        StartTime = DateTime.Now,
        EndTime = DateTime.Now.AddHours(1),
        EventType = EventType.Meeting,
        Priority = Priority.Medium,
        Color = "#1E88E5", // Default blue for meetings
        Attendees = new List<Attendee>(),
        Tags = new List<string>()
    };

    private readonly EventType[] _eventTypes = Enum.GetValues<EventType>();
    private readonly Priority[] _priorities = Enum.GetValues<Priority>();
    private readonly RecurrencePattern[] _recurrencePatterns = Enum.GetValues<RecurrencePattern>();
    private readonly RecurrenceEndType[] _recurrenceEndTypes = Enum.GetValues<RecurrenceEndType>();
    private string _userId = string.Empty;

    private IEnumerable<int> _selectedDaysOfWeek
    {
        get
        {
            if (string.IsNullOrEmpty(_event.RecurrenceDaysOfWeek))
                return new List<int>();

            return _event.RecurrenceDaysOfWeek.Split(',')
                .Select(d => int.TryParse(d.Trim(), out var day) ? day : -1)
                .Where(d => d >= 0);
        }
        set
        {
            _event.RecurrenceDaysOfWeek = value != null && value.Any()
                ? string.Join(",", value.OrderBy(d => d))
                : null;
        }
    }

    private readonly List<DayOfWeekOption> _daysOfWeek = new()
    {
        new DayOfWeekOption { Text = "Sun", Value = 0 },
        new DayOfWeekOption { Text = "Mon", Value = 1 },
        new DayOfWeekOption { Text = "Tue", Value = 2 },
        new DayOfWeekOption { Text = "Wed", Value = 3 },
        new DayOfWeekOption { Text = "Thu", Value = 4 },
        new DayOfWeekOption { Text = "Fri", Value = 5 },
        new DayOfWeekOption { Text = "Sat", Value = 6 }
    };

    private class DayOfWeekOption
    {
        public string Text { get; set; } = string.Empty;
        public int Value { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                _userId = appUser.Id;
            }
        }

        if (EditSingleOccurrence && InstanceEvent != null)
        {
            // Editing a single occurrence - use the instance data but don't save yet
            _event = new Event
            {
                Id = Guid.NewGuid(),
                Title = InstanceEvent.Title,
                Description = InstanceEvent.Description,
                StartTime = InstanceEvent.StartTime,
                EndTime = InstanceEvent.EndTime,
                Location = InstanceEvent.Location,
                EventType = InstanceEvent.EventType,
                Priority = InstanceEvent.Priority,
                IsAllDay = InstanceEvent.IsAllDay,
                Color = InstanceEvent.Color,
                UserId = _userId,
                IsRecurring = false,
                IsRecurrenceException = true,
                RecurrenceExceptionDate = InstanceEvent.StartTime.Date,
                RecurrenceParentId = InstanceEvent.RecurrenceParentId ?? InstanceEvent.Id,
                Tags = InstanceEvent.Tags.ToList(),
                Attendees = new List<Attendee>(),
                CreatedAt = DateTime.UtcNow
            };
        }
        else if (EventId.HasValue)
        {
            // Load existing event
            var existingEvent = await EventRepository.GetByIdAsync(EventId.Value, _userId);
            if (existingEvent != null)
            {
                _event = existingEvent;
            }
        }
        else
        {
            // Set userId for new event
            _event.UserId = _userId;

            if (PrefilledDate.HasValue)
            {
                // Set start and end times based on prefilled date
                _event.StartTime = PrefilledDate.Value.Date.AddHours(9); // 9 AM
                _event.EndTime = PrefilledDate.Value.Date.AddHours(10); // 10 AM
            }
        }
    }

    private bool IsValid()
    {
        return !string.IsNullOrWhiteSpace(_event.Title)
            && _event.EndTime > _event.StartTime;
    }

    private async Task Save()
    {
        try
        {
            if (EditSingleOccurrence)
            {
                // Create exception event for single occurrence edit
                _event.Id = Guid.NewGuid();
                _event.CreatedAt = DateTime.UtcNow;
                await EventRepository.CreateAsync(_event);
            }
            else if (EventId.HasValue)
            {
                // Update existing event (could be a regular event or the parent of a series)
                _event.UpdatedAt = DateTime.UtcNow;
                await EventRepository.UpdateAsync(_event);
            }
            else
            {
                // Create new event
                _event.Id = Guid.NewGuid();
                _event.CreatedAt = DateTime.UtcNow;
                await EventRepository.CreateAsync(_event);
            }

            DialogService.Close(true);
        }
        catch (Exception ex)
        {
            // Handle error - could show a notification here
            Console.WriteLine($"Error saving event: {ex.Message}");
        }
    }

    private string GetRecurrenceSummary()
    {
        return RecurrenceHelper.GetRecurrenceDescription(_event);
    }

    private string GetSaveButtonText()
    {
        if (EditSingleOccurrence)
            return "Update This Occurrence";
        else if (EventId.HasValue)
            return "Update";
        else
            return "Create";
    }

    private void Cancel()
    {
        DialogService.Close(false);
    }
}
