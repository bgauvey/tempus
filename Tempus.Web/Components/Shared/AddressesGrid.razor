@using Tempus.Core.Models

<!-- Search and Actions Section -->
<RadzenCard Style="margin-bottom: 1.5rem;">
    <RadzenRow Gap="1.5rem" AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="8">
            <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.Center">
                <RadzenTextBox @bind-Value="_searchTerm"
                             Placeholder="Search contacts by name, email, company, or job title..."
                             Style="width: 100%;" />
                <RadzenButton Icon="search"
                            ButtonStyle="ButtonStyle.Primary"
                            Click="HandleSearch"
                            Style="white-space: nowrap;">
                    Search
                </RadzenButton>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="4">
            <RadzenButton ButtonStyle="ButtonStyle.Primary"
                        Icon="add"
                        Click="HandleCreateContact"
                        Style="width: 100%; font-size: 1rem; font-weight: 600;">
                Add New Contact
            </RadzenButton>
        </RadzenColumn>
    </RadzenRow>
</RadzenCard>

<!-- Contacts Data Grid -->
<RadzenCard>
    <RadzenDataGrid Data="@Contacts"
                    TItem="Tempus.Core.Models.Contact"
                    AllowPaging="true"
                    PageSize="10"
                    AllowSorting="true"
                    AllowFiltering="false"
                    IsLoading="@IsLoading">
        <Columns>
            <RadzenDataGridColumn TItem="Tempus.Core.Models.Contact" Title="Contact Details" Width="300px">
                <Template Context="contact">
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.Center" Style="padding: 0.5rem 0;">
                        <RadzenBadge BadgeStyle="BadgeStyle.Primary"
                                    Style="width: 50px; height: 50px; border-radius: 50%; display: flex; align-items: center; justify-content: center; flex-shrink: 0; font-size: 0;">
                            <RadzenIcon Icon="person" Style="font-size: 1.5rem;" />
                        </RadzenBadge>
                        <RadzenStack Gap="0.25rem" Style="flex: 1; min-width: 0;">
                            <RadzenText Style="font-weight: 600; font-size: 1rem;">@contact.Name</RadzenText>
                            @if (!string.IsNullOrEmpty(contact.Email))
                            {
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem" AlignItems="AlignItems.Center">
                                    <RadzenIcon Icon="email" Style="font-size: 0.875rem;" />
                                    <RadzenText TextStyle="TextStyle.Body2">@contact.Email</RadzenText>
                                </RadzenStack>
                            }
                            @if (!string.IsNullOrEmpty(contact.Phone))
                            {
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem" AlignItems="AlignItems.Center">
                                    <RadzenIcon Icon="phone" Style="font-size: 0.875rem;" />
                                    <RadzenText TextStyle="TextStyle.Body2">@contact.Phone</RadzenText>
                                </RadzenStack>
                            }
                        </RadzenStack>
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Tempus.Core.Models.Contact" Property="Company" Title="Company" Width="200px">
                <Template Context="contact">
                    <RadzenStack Gap="0.25rem">
                        @if (!string.IsNullOrEmpty(contact.Company))
                        {
                            <RadzenText Style="font-weight: 600; font-size: 0.95rem;">@contact.Company</RadzenText>
                            @if (!string.IsNullOrEmpty(contact.JobTitle))
                            {
                                <RadzenText TextStyle="TextStyle.Body2">@contact.JobTitle</RadzenText>
                            }
                        }
                        else
                        {
                            <RadzenText Style="opacity: 0.5;">-</RadzenText>
                        }
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Tempus.Core.Models.Contact" Property="CreatedAt" Title="Added" Width="150px">
                <Template Context="contact">
                    <RadzenStack Gap="0.25rem">
                        <RadzenText Style="font-weight: 600; font-size: 0.95rem;">@contact.CreatedAt.ToString("MMM dd, yyyy")</RadzenText>
                        @if (contact.IsAutoCreated)
                        {
                            <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="Auto-added" Style="width: fit-content;" />
                        }
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Tempus.Core.Models.Contact" Title="Notes" Width="200px">
                <Template Context="contact">
                    @if (!string.IsNullOrEmpty(contact.Notes))
                    {
                        <RadzenText TextStyle="TextStyle.Body2" Style="font-style: italic;">
                            @(contact.Notes.Length > 50 ? contact.Notes.Substring(0, 50) + "..." : contact.Notes)
                        </RadzenText>
                    }
                    else
                    {
                        <RadzenText Style="opacity: 0.5; font-style: italic;">No notes</RadzenText>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Tempus.Core.Models.Contact" Title="Actions" Width="150px" Sortable="false">
                <Template Context="contact">
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                        <RadzenButton Icon="edit"
                                    ButtonStyle="ButtonStyle.Primary"
                                    Size="ButtonSize.Small"
                                    Click="@(() => HandleEditContact(contact.Id))"
                                    title="Edit Contact" />
                        <RadzenButton Icon="delete"
                                    ButtonStyle="ButtonStyle.Danger"
                                    Size="ButtonSize.Small"
                                    Click="@(() => HandleDeleteContact(contact.Id))"
                                    title="Delete Contact" />
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    [Parameter]
    public List<Tempus.Core.Models.Contact> Contacts { get; set; } = new();

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public EventCallback<string> OnSearch { get; set; }

    [Parameter]
    public EventCallback<Guid> OnEditContact { get; set; }

    [Parameter]
    public EventCallback<Guid> OnDeleteContact { get; set; }

    [Parameter]
    public EventCallback OnCreateContact { get; set; }

    private string _searchTerm = string.Empty;

    private async Task HandleSearch()
    {
        await OnSearch.InvokeAsync(_searchTerm);
    }

    private async Task HandleEditContact(Guid id)
    {
        await OnEditContact.InvokeAsync(id);
    }

    private async Task HandleDeleteContact(Guid id)
    {
        await OnDeleteContact.InvokeAsync(id);
    }

    private async Task HandleCreateContact()
    {
        await OnCreateContact.InvokeAsync();
    }
}
