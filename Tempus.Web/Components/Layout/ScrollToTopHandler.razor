@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

@code {
    private bool _jsInitialized = false;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsInitialized = true;

            // Give time for Radzen components to render
            await Task.Delay(150);
            await ScrollToTop();
        }
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (!_jsInitialized)
        {
            return;
        }

        try
        {
            await InvokeAsync(async () =>
            {
                // Wait for Radzen to render the new page content
                await Task.Delay(150);
                await ScrollToTop();
                // Try again after a bit more time to ensure it worked
                await Task.Delay(50);
                await ScrollToTop();
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Navigation scroll error: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Navigation scroll error: {ex.Message}");
        }
    }

    private async Task ScrollToTop()
    {
        try
        {
            // Try calling the function
            await JSRuntime.InvokeVoidAsync("scrollToTop");
        }
        catch (Exception)
        {
            // Fallback: use eval to execute the scroll directly
            try
            {
                await JSRuntime.InvokeVoidAsync("eval", @"
                    const rzBody = document.querySelector('.rz-body');
                    if (rzBody) {
                        rzBody.scrollTop = 0;
                        console.log('Direct scroll - rz-body scrollTop set to 0');
                    }
                    document.documentElement.scrollTop = 0;
                    window.scrollTo(0, 0);
                ");
            }
            catch (Exception evalEx)
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Eval also failed: {evalEx.Message}");
                System.Diagnostics.Debug.WriteLine($"Eval also failed: {evalEx.Message}");
            }
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
